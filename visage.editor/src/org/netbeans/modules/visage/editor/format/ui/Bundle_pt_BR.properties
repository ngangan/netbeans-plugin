# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=Tabula\u00e7\u00f5es e indenta\u00e7\u00f5es
LBL_CodeGeneration=Gera\u00e7\u00e3o de c\u00f3digo
LBL_Alignment=Alinhamento
LBL_Braces=Chaves
LBL_Wrapping=Empacotamento
LBL_BlankLines=Linhas em branco
LBL_BlankLines2=Linhas em branco2
LBL_Spaces=Espa\u00e7os
LBL_Imports=Importa\u00e7\u00f5es

LBL_bp_SAME_LINE=Mesma linha
LBL_bp_NEW_LINE=Nova linha
LBL_bp_NEW_LINE_HALF_INDENTED=Nova linha com meia indenta\u00e7\u00e3o
LBL_bp_NEW_LINE_INDENTED= Nova linha com indenta\u00e7\u00e3o

LBL_bg_GENERATE=Gerar
LBL_bg_LEAVE_ALONE=Ignorar
LBL_bg_ELIMINATE=Eliminar

LBL_wrp_WRAP_ALWAYS=Sempre
LBL_wrp_WRAP_IF_LONG=Se longo
LBL_wrp_WRAP_NEVER=Nunca

LBL_ExpandTabToSpaces=&Expandir tabula\u00e7\u00f5es para espa\u00e7os
LBL_TabSize=&Tamanho da tabula\u00e7\u00e3o:
LBL_IndentSize=Tamanho da &indenta\u00e7\u00e3o:
LBL_ContinuationIndentSize=Tamanho da indenta\u00e7\u00e3o de continua\u00e7\u00e3o:
LBL_LabelIndent=Indenta\u00e7\u00e3o do &r\u00f3tulo\:
LBL_AbsoluteLabelIndent=Indenta\u00e7\u00e3o do r\u00f3tulo &absoluto
LBL_IndentTopLevelClassMemberts=&Indentar membros da classe de n\u00edvel superior
LBL_AddLeadingStarInComment=A&dicionar asterisco no coment\u00e1rio
LBL_RightMargin=Margem &direita:

LBL_Naming=Nomea\u00e7\u00e3o\:
LBL_PreferLongerNames=Preferir nomes mais longos
LBL_Prefix=Prefixo
LBL_Suffix=Sufixo
LBL_Field=Campo\:
LBL_StaticField=Campo est\u00e1tico\:
LBL_Parameter=Par\u00e2metro\:
LBL_LocalVariable=Vari\u00e1vel local\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Qualificar acesso de campo
LBL_UseIsForBooleanGetters=Uso em getters booleanos
LBL_AddOverrideAnnotation=Adicionar anota\u00e7\u00e3o de sobrescrita
LBL_FinalMofier=Modificador final\:
LBL_ParametersFinal=Tornar os par\u00e2metros gerados definitivos
LBL_LocalVariablesFinal=Tornar as vari\u00e1veis locais geradas definitivas
LBL_ImportOredering=Importar ordenamento\:
LBL_ImportUp=Mover para cima
LBL_ImportDown=Mover para baixo
LBL_blBeforePackage=Antes do pa&cote\:
LBL_blAfterPackage=Ap\u00f3s o pac&ote\:
LBL_blBeforeImports=Antes das &importa\u00e7\u00f5es\:
LBL_blAfterImports=Ap\u00f3s a importa\u00e7\u00e3o\:
LBL_blBeforeClass=Antes da &classe\:
LBL_blAfterClass=Ap\u00f3s a c&lasse\:
LBL_blAfterClassHeader=Ap\u00f3s o &cabe\u00e7alho da classe\:
LBL_blBeforeFields=Antes do atri&buto:
LBL_blAfterFields=Ap\u00f3s o at&tributo:
LBL_blBeforeMethods=Antes da &fun\u00e7\u00e3o:
LBL_blAfterMethods=Ap\u00f3s a fu&n\u00e7\u00e3o:

LBL_BeforeKeywords=Antes das palavras-chaves
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Antes dos par\u00eanteses
LBL_spaceBeforeFunctionDeclParen=Declara\u00e7\u00e3o de fun\u00e7\u00e3o
LBL_spaceBeforeFunctionCallParen=Chamada de fun\u00e7\u00e3o 
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Par\u00e2metros de anota\u00e7\u00e3o
LBL_spaceBeforeObjectLiteral=Literal de objeto

LBL_AroundOperators=Ao redor de operadores
LBL_spaceAroundUnaryOps=Operadores un\u00e1rios
LBL_spaceAroundBinaryOps=Operadores bin\u00e1rios
LBL_spaceAroundRangeOps=Operadores de intervalos
LBL_spaceAroundAssignOps=Operadores de atribui\u00e7\u00e3o

LBL_BeforeLeftBraces=Antes das chaves \u00e0 esquerda
LBL_spaceBeforeClassDeclLeftBrace=Declara\u00e7\u00e3o de classe
LBL_spaceBeforeFunctionDeclLeftBrace=Declara\u00e7\u00e3o de fun\u00e7\u00e3o
LBL_spaceBeforeOnReplaceDeclLeftBrace=Declara\u00e7\u00e3o de substitui\u00e7\u00e3o
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSequenceInitLeftBrace=Inicializador de sequ\u00eancia
LBL_spaceBeforeObjectLiteralDeclLeftBrace=Literal de objeto
LBL_spaceBeforeClassInitBlockLeftBrace=Bloco init da classe
LBL_spaceBeforePostInitBlockLeftBrace=Bloco init de envio de classe

LBL_WithinParentheses=Dentro dos par\u00eanteses
LBL_spaceWithinParens=Par\u00eanteses
LBL_spaceWithinFunctionDeclParens=Declara\u00e7\u00e3o de fun\u00e7\u00e3o
LBL_spaceWithinFunctionCallParens=Chamada de fun\u00e7\u00e3o 
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinBraces=Chaves
LBL_spaceWithinArrayInitBrackets=Chaves de init de sequ\u00eancia

LBL_Other=Outro
LBL_spaceBeforeComma=Antes da v\u00edrgula
LBL_spaceAfterComma=Ap\u00f3s a v\u00edrgula
LBL_spaceBeforeSemi=Antes do ponto-e-v\u00edrgula
LBL_spaceAfterSemi=Ap\u00f3s o ponto-e-v\u00edrgula
LBL_spaceBeforeColon=Antes de dois-pontos
LBL_spaceAfterColon=Ap\u00f3s dois-pontos
LBL_wrp_extendsImplementsKeyword=&Estende palavra-chave\: 
LBL_wrp_extendsImplementsList=E&stende lista\:
LBL_wrp_methodParameters=&Par\u00e2metros da fun\u00e7\u00e3o\:
LBL_wrp_throwsKeyword=&Lan\u00e7a palavra-chave\:
LBL_wrp_throwsList=La&n\u00e7a lista\:
LBL_wrp_methodCallArgs=Argumentos de chamada de fun\u00e7\u00e3o\:
LBL_wrp_annotationArgs=Arg&umentos da anota\u00e7\u00e3o\:
LBL_wrp_chainedFunctionCalls=C&hamadas de fun\u00e7\u00e3o encadeadas\:
LBL_wrp_arrayInit=Iniciali&zador de sequ\u00eancia:
LBL_wrp_for=&Para\:
LBL_wrp_forStatement=Senten\u00e7a F&or\:
LBL_wrp_ifStatement=Express\u00e3o &If:
LBL_wrp_whileStatement=Senten\u00e7a &While\:
LBL_wrp_doWhileStatement=Senten\u00e7a &Do ... While
LBL_wrp_assert=&Afirmar\:
LBL_wrp_enumConstants=&Constantes de enum\:
LBL_wrp_annotations=A&nota\u00e7\u00f5es\:
LBL_wrp_binaryOps=Operadores &bin\u00e1rios\:
LBL_wrp_ternaryOps=Operadores tern\u00e1r&ios\:
LBL_wrp_assignOps=Operadores de atribu&i\u00e7\u00e3o\:

LBL_br_bracesPlacement=Localiza\u00e7\u00e3o das chaves
LBL_br_bracesGeneration=Gera\u00e7\u00e3o de chaves
LBL_al_newLines=Novas linhas
LBL_al_multilineAlignment=Alinhamento de m\u00faltiplas linhas
LBL_bp_ClassDecl=Declara\u00e7\u00e3o de &classe\:
LBL_bp_MethodDecl=&Declara\u00e7\u00e3o de fun\u00e7\u00e3o:
LBL_bp_Other=&Outro\:
LBL_bp_SpecialElseIf=Tratamento e&special "else if"
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=ap\u00f3s os modificado&res
LBL_am_MethodParams=&Par\u00e2metros da fun\u00e7\u00e3o
LBL_am_CallArgs=Arg&umentos da chamada de fun\u00e7\u00e3o
LBL_am_AnnotationArgs=Argumentos da &anota\u00e7\u00e3o
LBL_an_Implements=E&stende lista
LBL_am_Throws=&Lan\u00e7a lista
LBL_am_Paren=Com &par\u00eanteses
LBL_am_BinaryOp=Operadores &bin\u00e1rios
LBL_am_TernaryOp=Express\u00e3o "if else"
LBL_am_Assign=Atri&bui\u00e7\u00e3o
LBL_am_For="&para"
LBL_am_ArrayInit=Iniciali&za\u00e7\u00e3o de sequ\u00eancia

LBL_IndentCasesFromSwitch=Indentar senten\u00e7as de caso na &troca

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\npublic int number = 1;\nprivate String text ="A";\npublic ClassA() {\n}\npublic void method(String text, int number) {\n}\n}

#SAMPLE_TabsIndents=public def str: String = "str";\npublic class ClassA {\nvar multiples = [0..100][n | n mod 17 == 0];\nvar days = ["Mon", "Tue", "Wed", "Thu", "Fri",\n"Sat", "Sun"];\ninit {\nprintln("init block...");\n}\npublic function reverseSeq() {\nreverse days;\n}\npublic function sliceSeq() {\ndef weekend = days[5..6];\ndef weekdays = days[0..<5];\ndef weekend2 = days[5..];\ndef days2 = days[0..<];\n}\n}

#SAMPLE_AlignBraces=import java.lang.Exception;\nmixin class Class1 {}\nmixin class Class2 {}\nmixin class Class3 {}\npublic class ClassA extends Class1,\nClass2, Class3 {\nvar p: Integer[] = [1,\n2, 3, 5, 7];\npublic var number = 1 on replace prev = next {\nif (prev != next) {\n}\n};\nvar timeline = visage.animation.Timeline {\nrepeatCount: Double.POSITIVE_INFINITY\n};\npublic function f1(text: String,\nnumber: Integer): Integer {\nvar t1 = (text as String);\nvar num: Integer;\nif (text == null) {\nt1 =\n"a";\n} else if (text.length() == 0) {\nt1 = if (number == 2) then "empty" else "nonempty";\nnum = number\n+ 3 * 2;\n} else {\nnum++;\n}\nfor (i in [1..100]) {\n}\ntry {\nwhile (this.number < 2\nand number != 3) {\nf1("Some text",\n12);\n}\n} catch (e: Exception) {\n} finally {\n}\nreturn 0;\n}\n}

#SAMPLE_Wrapping=public class MyNode extends Node, Object {\npublic var x: Number;\nvar p: Integer[] = [1, 2, 3, 5, 7];\nprotected function create(text: String, number: Integer): Integer {\nif (text == null) {\nprintln(create("text text text", 100));\n} else if (text == "noob") {\nx = func1().func2().func3();\n} else {\nx = 0;\n}\nfor (num in p) x = 10; {\nvar i = num * 2;\n}\nwhile (i < 5 or text == "") {\ni++;\nreturn 0;\n}\n}\n}

#SAMPLE_BlankLines=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\npublic def str: String = "str";\npublic-read var i = 10;\npublic function function1() {}\npublic function function2(param1: Integer): String {"str = {str}"}\npublic class ClassA {\n}\npublic class ClassB {\n}

#SAMPLE_BlankLines2=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\nfunction f() {}\nfunction f1() {}\nprintln("");\nprintln("");\nprintln("");\nprintln("");\nfunction f2() {}\nfunction f3() {}

#SAMPLE_Spaces=import java.lang.IllegalStateException;\nimport visage.scene.text.Text;\nimport visage.scene.text.Font;\npublic class ClassA {\npublic-read var number: Number = 1;\npackage def text: String = "A";\nvar floats: Float[];\nvar doubles = [3.67, 40, 2e-30];\ninit {\ninsert 12.6 into floats;\n}\npostinit {\ndelete floats;\n}\npublic function f1(text: String, number: Number): Number {\nvar n = number;\nvar t = Text {\nfont: Font {size: 24}\nx: 10, y: 30\ncontent: text\n};\nif (number == 13) {\nreturn java.lang.System.currentTimeMillis();\n} else {\n{\n}\n}\nfor (i in [20..100]) {\nwhile (i mod 13 > 5) {\nf1("{t.content} ", n++);\n}\n}\ntry {\nfor (f in floats) {\nprintln(f);\n}\n} catch (illegalStateException: IllegalStateException) {\nillegalStateException.printStackTrace();\n} finally {\nreturn 20;\n}\nreturn if (number > 100) then -1 else -2;\n}\n}

#nlFinallyCheckBox1.text="finall&y"

AN_Preview=Visualizar
AD_Preview=Visualizar
FmtBraces.objectLiteralLabel.text=Literal de objeto:
FmtBraces.onReplaceLabel.text=Ao substituir:
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indentar os r\u00f3tulos de forma absoluta
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Linhas de coment\u00e1rio iniciando com uma estrela l\u00edder
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Indenta\u00e7\u00e3o adicional para declara\u00e7\u00f5es de caso
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indentar para membros da classe de n\u00edvel superior
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indentar o tamanho em espa\u00e7os
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Indenta\u00e7\u00e3o do tamanho do r\u00f3tulo em espa\u00e7os
FmtBlankLines2.aNonClassExpressionLabel.text=Ap\u00f3s a express\u00e3o non-class
FmtBlankLines2.bNonClassExpressionLabel.text=Antes da express\u00e3o non-class
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
FmtAlignment.amSequenceInitCheckBox.text=&Init de sequ\u00eancia

