<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->

<!--
 To generate lexer run:
     ant -Dcompile.grammar=true -Djfxl.jfxc.home=.../openjfx-compiler~marina-setup/openjfx-compiler~marina-master
 It is expected that the antlr resides in the marina-setup dir under "import" subdirectory.
 Then it may be necessary to regenerate token ids by running
     ant -Dcompile.grammar=true -Djfxl.jfxc.home=.../openjfx-compiler~marina-setup/openjfx-compiler~marina-master _generateTokenIds
 The output can be postprocessed (strip "[java]") and pasted into JFXTokenId.
  -->
<project name="org.netbeans.modules.javafx.lexer" default="netbeans" basedir=".">
    <description>Builds, tests, and runs the project org.netbeans.modules.javafx.lexer.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--property name="jfxl.jfxc.home" value="E:\\SunWork\\jfxc\\main"/-->
    <property name="jfxl.antlr.grammar" value="v4Lexer"/>
    <property name="jfxl.jfxc.grammar" value="${jfxl.jfxc.home}/src/share/classes/com/sun/tools/javafx/antlr/${jfxl.antlr.grammar}.g"/>
    <property name="jfxl.lexer.grammar" value="${basedir}/${jfxl.antlr.grammar}.g"/>
    <property name="jfxl.antlr.dir" value="${jfxl.jfxc.home}/../import/antlr-3.1.3/antlr-3.1.3"/>

    <path id="jfxl.antlr.classpath">
         <fileset dir="${jfxl.antlr.dir}">
             <include name="**/*.jar"/>
             <include name="*.jar"/>
         </fileset>
     </path>

    <property name="jfxl.antlr.generated.dir" value="${basedir}/src/org/netbeans/lib/javafx/lexer"/>

    <target name="_generateTokenIds" depends="build-init" if="compile.grammar">
        <echo message="Generate token IDs."/>

        <path id="jfxl.generateTokenIdsCp">
                <pathelement path="${build.classes.dir}"/>
                <fileset dir="${netbeans.dest.dir}">
                    <include name="ide*/modules/org-netbeans-modules-lexer.jar"/>
                    <include name="platform*/lib/org-openide-util.jar"/>
                </fileset>
                <path refid="cp" />
        </path>
        <java classname="org.netbeans.lib.javafx.lexer.TokenIdGenerator"
              fork="true">
            <classpath refid="jfxl.generateTokenIdsCp" />
            <arg value="-tokens"/>
            <arg value="${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}.tokens"/>
        </java>
    </target>

    <target name="_verifyGrammar" depends="build-init" if="compile.grammar">
        <echo message="Verifying grammar compatibility"/>

        <path id="jfxl.grammarVerifierCp">
                <pathelement path="${build.classes.dir}"/>
                <fileset dir="${netbeans.dest.dir}">
                    <include name="ide*/modules/org-netbeans-modules-lexer.jar"/>
                    <include name="java*/modules/org-netbeans-modules-java-lexer.jar"/>
                    <include name="platform*/lib/org-openide-util.jar"/>
                </fileset>
                <path refid="cp" />
        </path>
        <property name="debug.jfxl.grammarVerifierCp" refid="jfxl.grammarVerifierCp"/>
        <echo message="Verifier classpath: ${debug.jfxl.grammarVerifierCp}" /> 


        <java classname="org.netbeans.lib.javafx.lexer.GrammarVerifier" resultproperty="antlr.verify.output"
              fork="true" logError="true">
            <classpath refid="jfxl.grammarVerifierCp" />
            <arg value="${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}.tokens"/>
        </java>
        <fail message="Grammar verification failed.">
            <condition>
                <not>
                    <equals arg1="0" arg2="${antlr.verify.output}" trim="true"/>
                </not>
            </condition>
        </fail>
        <echo message="Grammar compatibility verified."/>
    </target>

    <target name="compile" depends="init, pre-compile, projectized-common.compile, post-compile"
            description="Overriden compile from common project."/>

    <target name="_antlrgen" if="lexerNotUptodate">
        <copy file="${jfxl.jfxc.grammar}" todir="${basedir}" />
        <mkdir dir="${jfxl.antlr.generated.dir}"/>
        <copy file="${jfxl.lexer.grammar}" todir="${jfxl.antlr.generated.dir}"/>
        <replace dir="${jfxl.antlr.generated.dir}">
            <include name="*.g"/>
            <!--<replacefilter token="package com.sun.tools.javafx.antlr;" value="package org.netbeans.lib.javafx.lexer;" />-->
            <!--<replacefilter token="AbstractGeneratedLexerV4 " value="org.netbeans.lib.javafx.lexer.Lexer" />-->
            <replacetoken><![CDATA[package com.sun.tools.javafx.antlr;]]></replacetoken>
            <replacevalue><![CDATA[package org.netbeans.lib.javafx.lexer;]]></replacevalue>
        </replace>

        <echo message="Generating lexer from ${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}.g"/>
        <property name="info.antrl.classpath" refid="jfxl.antlr.classpath" />
        <echo message="Antlr classpath = ${info.antrl.classpath}" />
        <java classname="org.antlr.Tool" fork="true" resultproperty="antlr.output" newenvironment="true" failonerror="true">
            <classpath>
                <fileset dir="${jfxl.antlr.dir}">
                    <include name="**/*.jar"/>
                    <include name="*.jar"/>
                </fileset>
            </classpath>
            <arg value="-o"/>
            <arg value="${jfxl.antlr.generated.dir}"/>
            <arg value="${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}.g"/>
            <jvmarg value="-Xmx256m"/>
        </java>
        <fail message="Grammar compilation has failed.">
            <condition>
                <not>
                    <equals arg1="0" arg2="${antlr.output}" trim="true"/>
                </not>
            </condition>
        </fail>
        <delete file="${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}Parser.java" />
    </target>

    <target name="pre-compile" if="compile.grammar">
        <fail message="Grammar not found! ${jfxl.jfxc.grammar}">
            <condition>
                <not>
                    <available file="${jfxl.jfxc.grammar}" type="file"/>
                </not>
            </condition>
        </fail>
        <condition property="lexerNotUptodate">
            <not>
                <uptodate srcfile="${jfxl.jfxc.grammar}" targetfile="${jfxl.antlr.generated.dir}/${jfxl.antlr.grammar}.java"/>
            </not>
        </condition>
        <antcall target="_antlrgen"/>
    </target>

    <target name="post-compile">
        <antcall target="_verifyGrammar"/>
    </target>

    <target name="grammar" description="Verify current implementation against current JFX grammar.">
        <echo message="Loading grammar ${jfxl.jfxc.grammar}"/>
        <available file="${jfxl.jfxc.grammar}" type="file" property="jfxc.grammar.available"/>
        <antcall target="_verifyGrammar"/>
        <antcall target="netbeans"/>
    </target>
</project>
