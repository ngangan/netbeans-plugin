# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=Tabs and Indents
LBL_CodeGeneration=Code Generation
LBL_Alignment=Alignment
LBL_Braces=Braces
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_BlankLines2=Blank Lines2
LBL_Spaces=Spaces
LBL_Imports=Imports

LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_bp_NEW_LINE_HALF_INDENTED=New Line Half Indented
LBL_bp_NEW_LINE_INDENTED= New Line Indented
    
LBL_bg_GENERATE=Generate
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate
       
LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Never

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=&Indentation Size:
LBL_ContinuationIndentSize=&Continuation Indentation Size:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=&Indent Top Level Class Members
LBL_AddLeadingStarInComment=A&dd Leading Star In Comment
LBL_RightMargin=&Right Margin:
 
LBL_Naming=Naming\:
LBL_PreferLongerNames=Prefer Longer Names
LBL_Prefix=Prefix
LBL_Suffix=Suffix
LBL_Field=Field\:
LBL_StaticField=Static Field\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Local Variable\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Qualify Field Access
LBL_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_AddOverrideAnnotation=Add Override Annotation
LBL_FinalMofier=Final Modifier\:
LBL_ParametersFinal=Make Generated Parameters Final
LBL_LocalVariablesFinal=Make Generated Local variables Final
LBL_ImportOredering=Import Ordering\:
LBL_ImportUp=Move Up
LBL_ImportDown=Move Down
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After P&ackage\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After Imports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blBeforeFields=Before Attri&bute:
LBL_blAfterFields=After At&tribute:
LBL_blBeforeMethods=Before &Function:
LBL_blAfterMethods=After Fu&nction:

LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"
LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeFunctionDeclParen=Function Declaration
LBL_spaceBeforeFunctionCallParen=Function Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters
LBL_spaceBeforeObjectLiteral=Object Literal

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundIfElseOps="if else" Operators
LBL_spaceAroundAssignOps=Assignment Operators

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeFunctionDeclLeftBrace=Function Declaration
LBL_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Static Initializer
LBL_spaceBeforeSequenceInitLeftBrace=Sequence Initializer
LBL_spaceBeforeObjectLiteralDeclLeftBrace=Object Literal
LBL_spaceBeforeClassInitBlockLeftBrace=Class Init Block
LBL_spaceBeforePostInitBlockLeftBrace=Class Post Init Block

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinFunctionDeclParens=Function Declaration
LBL_spaceWithinFunctionCallParens=Function Call
LBL_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinAnnotationParens=Annotation
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Other
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast
LBL_wrp_extendsImplementsKeyword=&Extends Keyword\: 
LBL_wrp_extendsImplementsList=E&xtends List\:
LBL_wrp_methodParameters=Function &Parameters\:
LBL_wrp_throwsKeyword=&Throws Keyword\:
LBL_wrp_throwsList=Th&rows List\:
LBL_wrp_methodCallArgs=Function Call Arguments\:
LBL_wrp_annotationArgs=Annotation Arg&uments\:
LBL_wrp_chainedFunctionCalls=C&hained Function Calls\:
LBL_wrp_arrayInit=Array Initiali&zer\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or Statement\:
LBL_wrp_ifStatement=&If Statement\:
LBL_wrp_whileStatement=&While Statement\:
LBL_wrp_doWhileStatement=&Do ... While Statement
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants=Enum &Constants\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=&Binary Operators\:
LBL_wrp_ternaryOps=Ternar&y Operators\:
LBL_wrp_assignOps=Assi&gnment Operators\:

LBL_br_bracesPlacement=Braces Placement
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment
LBL_bp_ClassDecl=&Class Declaration\:
LBL_bp_MethodDecl=&Function Declaration:
LBL_bp_Other=&Other\:
LBL_bp_SpecialElseIf=&Special "else if" Treatment
LBL_bg_If="&if"\:
LBL_bg_For="&for"\:
LBL_bg_While="&while"\:
LBL_bg_DoWhile="&do ... while"\:
LBL_nl_Else="&else"
LBL_nl_While="w&hile"
LBL_nl_Catch="c&atch"
LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=after modifie&rs
LBL_am_MethodParams=Function &Parameters
LBL_am_CallArgs=Function Call Arg&uments
LBL_am_AnnotationArgs=&Annotation Arguments
LBL_an_Implements=E&xtends List
LBL_am_Throws=&Throws List
LBL_am_Paren=Parenthesize&d
LBL_am_BinaryOp=&Binary Operators
LBL_am_TernaryOp="if else" Expression
LBL_am_Assign=Assi&gnment
LBL_am_For="&for"
LBL_am_ArrayInit=Sequence Initiali&zing

LBL_IndentCasesFromSwitch=Indent Case Statements In &Switch

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
public int number = 1;\
private String text ="A";\
public ClassA() {\
}\
public void method(String text, int number) {\
} }

SAMPLE_TabsIndents=public def str: String = "str";\
public class ClassA {\
    var multiples = [0..100][n | n mod 17 == 0];\
    var days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];\
    init {\
        println("init block...");\
    }\
    public function reverseSeq() {\
        reverse days;\
    }\
    public function sliceSeq() {\
        def weekend = days[5..6];\
        def weekdays = days[0..<5];\
        def weekend2 = days[5..];\
        def days2 = days[0..<];\
    }\
}

SAMPLE_AlignBraces=import java.lang.Exception;\
\
mixin class Class1 {}\
mixin class Class2 {}\
mixin class Class3 {}\
\
public class ClassA extends Class1, Class2, Class3 {\
    public var number = 1;\
    var letters = ["A", "B", "C", "D"];\
\
    public function f1(text: String, number: Integer): Integer {\
        var t1 = (text as String);\
        var num: Integer;\
        if (text == null) {\
            t1 = "a";\
        } else if (text.length() == 0) {\
            t1 = if (number == 2) then "empty" else "nonempty";\
            num = number;\
        } else {\
            num++;\
        }\
        for (i in [1..100]) {\
        }\
        try {\
            while (this.number < 2 and number != 3) {\
                f1("Some text", 12);\
            }\
        } catch (e: Exception) {\
        } finally {\
        }\
        return 0;\
    }\
}


SAMPLE_Wrapping=public class MyNode extends Node {\
     public var x : Number;\
     var p : Integer[] = [ 1, 2, 3, 5, 7 ];\
Wrapping\
     protected function create( text : String,\
        number : Integer ) : Integer {\
        if( text == null ) {\
            println( 5 );\
        } else if( text == "noob" ) {\
            x = -5;\
        } else {\
            x = 0;\
        }\
\
        for( prim in p ) {\
\
        }\
\
        var i = 0;\
        while( i < 5 or text == "" ) {\
            i++;\
        }\
        return 0;\
     }\
 }


SAMPLE_BlankLines=package org.netbeans.samples;\
import java.util.List;\
import java.lang.Integer;\
public def str: String = "str";\
public-read var i = 10;\
public function function1() {}\
public function function2(param1: Integer): String {"str = {str}"}\
public class ClassA {\
}\
public class ClassB {\
}

SAMPLE_BlankLines2=package org.netbeans.samples;\
import java.util.List;\
import java.lang.Integer;\
function f() {}\
function f1() {}\
println("");\
println("");\
println("");\
println("");\
function f2() {}\
function f3() {}

SAMPLE_Spaces=public class MyNode extends Node {\
     public var x : Number;\
     var p : Integer[] = [ 1, 2, 3, 5, 7 ];\
//Spaces\
     protected function create( text : String,\
        number : Integer ) : Integer {\
        if( text == null ) {\
            println( 5 );\
        } else if( text == "noob" ) {\
            x = -5;\
        } else {\
            x = 0;\
        }\
\
        for( prim in p ) {\
\
        }\
\
        var i = 0;\
        while( i < 5 or text == "" ) {\
            i++;\
        }\
        return 0;\
     }\
 }


nlFinallyCheckBox1.text="finall&y"


AN_Preview=Preview
AD_Preview=Preview
FmtBraces.objectLiteralLabel.text=Object Literal:
FmtBraces.onReplaceLabel.text=On Replace:
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indent Labels absolutely
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Comment lines starting with leading star
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Additional indent for case statements
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indent for top-level class members
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indent size in spaces
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Label indentation size in spaces
FmtBlankLines2.aNonClassExpressionLabel.text=After non-class Expression
FmtBlankLines2.bNonClassExpressionLabel.text=Before non-class Expression
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
