# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=Tabulatoren und Einr\u00fcckungen
LBL_CodeGeneration=Quelltexterzeugung
LBL_Alignment=Ausrichtung
LBL_Braces=Klammern
LBL_Wrapping=Umbr\u00fcche
LBL_BlankLines=Leere Zeilen
LBL_BlankLines2=Leere Zeilen2
LBL_Spaces=Leerzeichen
LBL_Imports=Importe

LBL_bp_SAME_LINE=Gleiche Zeile
LBL_bp_NEW_LINE=Neue Zeile
LBL_bp_NEW_LINE_HALF_INDENTED=Neue Zeile, halb einger\u00fcckt
LBL_bp_NEW_LINE_INDENTED= Neue Zeile, einger\u00fcckt

LBL_bg_GENERATE=Erzeugen
LBL_bg_LEAVE_ALONE=Nichts machen
LBL_bg_ELIMINATE=Eliminieren

LBL_wrp_WRAP_ALWAYS=Immer
LBL_wrp_WRAP_IF_LONG=Wenn zu lang
LBL_wrp_WRAP_NEVER=Nie

LBL_ExpandTabToSpaces=T&abulatoren in Leerzeichen wandeln
LBL_TabSize=&Tabulatorgr\u00f6\u00dfe
LBL_IndentSize=&Einr\u00fcckungsgr\u00f6\u00dfe:
LBL_ContinuationIndentSize=&Einr\u00fcckung bei Fortf\u00fchrung:
LBL_LabelIndent=&Labeleinr\u00fcckung\:
LBL_AbsoluteLabelIndent=&Absolute Label-Einr\u00fcckung
LBL_IndentTopLevelClassMemberts=&Klassenmitglieder der oberen Ebene einr\u00fccken
LBL_AddLeadingStarInComment=&F\u00fchrenden Stern in Kommentar einf\u00fcgen
LBL_RightMargin=&Rechter Rand:

LBL_Naming=Benennung\:
LBL_PreferLongerNames=L\u00e4ngere Namen bevorzugen
LBL_Prefix=Pr\u00e4fix
LBL_Suffix=Suffix
LBL_Field=Feld\:
LBL_StaticField=Feld (static)\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Lokale Variable\:
LBL_Misc=Verschiedenes\:
LBL_QualifyFieldAccess=Feldzugriff qualifizieren
LBL_UseIsForBooleanGetters="Is" f\u00fcr get-Methoden von "Boolean" benutzen
LBL_AddOverrideAnnotation=Override-Annotation hinzuf\u00fcgen
LBL_FinalMofier=Modifizierer (final)\:
LBL_ParametersFinal=Erzeugte Parameter "final" machen
LBL_LocalVariablesFinal=Erzeugte lokale Variablen "final" machen
LBL_ImportOredering=Sortierung f\u00fcr Importe\:
LBL_ImportUp=Nach oben
LBL_ImportDown=Nach unten
LBL_blBeforePackage=Vor "&package"\:
LBL_blAfterPackage=Nach "p&ackage"\:
LBL_blBeforeImports=Vor "&import"\:
LBL_blAfterImports=Nach "import"\:
LBL_blBeforeClass=Vor "&class"\:
LBL_blAfterClass=Nach "c&lass"\:
LBL_blAfterClassHeader=Nach dem Klassenheader\:
LBL_blBeforeFields=Vor Attri&but:
LBL_blAfterFields=Nach At&tribut:
LBL_blBeforeMethods=Vor &Funktion:
LBL_blAfterMethods=Nach Fu&nktion:

LBL_BeforeKeywords=Vor Schl\u00fcsselw\u00f6rtern
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Vor runden Klammern
LBL_spaceBeforeFunctionDeclParen=Funktionsdeklaration
LBL_spaceBeforeFunctionCallParen=Funktionsaufruf
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotationsparameter
LBL_spaceBeforeObjectLiteral=Objektliteral

LBL_AroundOperators=Um Operatoren herum
LBL_spaceAroundUnaryOps=Un\u00e4re Operatoren
LBL_spaceAroundBinaryOps=Bin\u00e4re Operatoren
LBL_spaceAroundRangeOps=Bereichsoperatoren
LBL_spaceAroundAssignOps=Zuweisungsoperatoren

LBL_BeforeLeftBraces=Vor linken Klammern
LBL_spaceBeforeClassDeclLeftBrace=Klassendeklaration
LBL_spaceBeforeFunctionDeclLeftBrace=Funktionsdeklaration
LBL_spaceBeforeOnReplaceDeclLeftBrace=Zu Ersetzende Deklaration
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSequenceInitLeftBrace=Initialisierung der Sequenz
LBL_spaceBeforeObjectLiteralDeclLeftBrace=Objektliteral
LBL_spaceBeforeClassInitBlockLeftBrace=Klasseninitialisierungsblock
LBL_spaceBeforePostInitBlockLeftBrace=Klassennachinitialisierungsblock

LBL_WithinParentheses=Innerhalb von runden Klammern
LBL_spaceWithinParens=Runde Klammern
LBL_spaceWithinFunctionDeclParens=Funktionsdeklaration
LBL_spaceWithinFunctionCallParens=Funktionsaufruf
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinBraces=Klammern
LBL_spaceWithinArrayInitBrackets=Geschweifte Klammern zur Initialisierung einer Folge

LBL_Other= Andere
LBL_spaceBeforeComma=Vor Kommata
LBL_spaceAfterComma=Hinter Kommata
LBL_spaceBeforeSemi=Vor Semikola
LBL_spaceAfterSemi=Hinter Semikola
LBL_spaceBeforeColon=Vor Doppelpunkten
LBL_spaceAfterColon=Hinter Doppelpunkten
LBL_wrp_extendsImplementsKeyword=Schl\u00fcsselwort &Extends\: 
LBL_wrp_extendsImplementsList=Liste E&xtends\:
LBL_wrp_methodParameters=Funktions&parameter\:
LBL_wrp_throwsKeyword="&throws"-Schl\u00fcsselwort\:
LBL_wrp_throwsList="th&rows"-Liste\:
LBL_wrp_methodCallArgs=Argumente des Funktionsaufrufs\:
LBL_wrp_annotationArgs=Arg&umente f\u00fcr Anmerkungen\:
LBL_wrp_chainedFunctionCalls=Ver&ketteter Funktionsaufruf\:
LBL_wrp_arrayInit=Sequen&z-Initialisierer:
LBL_wrp_for=&For\:
LBL_wrp_forStatement="f&or"-Anweisung\:
LBL_wrp_ifStatement=&If-Ausdruck:
LBL_wrp_whileStatement="&while"-Anweisung\:
LBL_wrp_doWhileStatement=&Do... While-Anweisung
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants="enum"-&Konstanten\:
LBL_wrp_annotations=A&nnotationen\:
LBL_wrp_binaryOps=&Bin\u00e4roperatoren\:
LBL_wrp_ternaryOps=&Te&rn\u00e4roperatoren\:
LBL_wrp_assignOps=Zuweisun&gsoperatoren\:

LBL_br_bracesPlacement=Platzierung von Klammern
LBL_br_bracesGeneration=Erzeugung von Klammern
LBL_al_newLines=Neue Zeilen
LBL_al_multilineAlignment=Ausrichtung \u00fcber mehrere Zeilen
LBL_bp_ClassDecl=&Klassendeklaration\:
LBL_bp_MethodDecl=&Funktionsdeklaration:
LBL_bp_Other=&Andere\:
LBL_bp_SpecialElseIf=&Spezielle "else if"-Behandlung
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=Nach Modifizierern
LBL_am_MethodParams=&Funktionsparameter
LBL_am_CallArgs=Arg&umente f\u00fcr Funktionsaufruf
LBL_am_AnnotationArgs=&Argumente f\u00fcr Anmerkungen
LBL_an_Implements=Liste f\u00fcr "e&xtends"
LBL_am_Throws=Liste von &Throws
LBL_am_Paren=Geklammert
LBL_am_BinaryOp=&Bin\u00e4re Operatoren
LBL_am_TernaryOp="if else"-Ausdruck
LBL_am_Assign=Zuweisun&g
LBL_am_For="&for"
LBL_am_ArrayInit=Sequen&z-Initialisierung

LBL_IndentCasesFromSwitch="Case"-Anweisung in "&Switch" einr\u00fccken

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\npublic int number = 1;\nprivate String text ="A";\npublic ClassA() {\n}\npublic void method(String text, int number) {\n}\n}

#SAMPLE_TabsIndents=public def str: String = "str";\npublic class ClassA {\nvar multiples = [0..100][n | n mod 17 == 0];\nvar days = ["Mon", "Tue", "Wed", "Thu", "Fri",\n"Sat", "Sun"];\ninit {\nprintln("init block...");\n}\npublic function reverseSeq() {\nreverse days;\n}\npublic function sliceSeq() {\ndef weekend = days[5..6];\ndef weekdays = days[0..<5];\ndef weekend2 = days[5..];\ndef days2 = days[0..<];\n}\n}

#SAMPLE_AlignBraces=import java.lang.Exception;\nmixin class Class1 {}\nmixin class Class2 {}\nmixin class Class3 {}\npublic class ClassA extends Class1,\nClass2, Class3 {\nvar p: Integer[] = [1,\n2, 3, 5, 7];\npublic var number = 1 on replace prev = next {\nif (prev != next) {\n}\n};\nvar timeline = javafx.animation.Timeline {\nrepeatCount: Double.POSITIVE_INFINITY\n};\npublic function f1(text: String,\nnumber: Integer): Integer {\nvar t1 = (text as String);\nvar num: Integer;\nif (text == null) {\nt1 =\n"a";\n} else if (text.length() == 0) {\nt1 = if (number == 2) then "empty" else "nonempty";\nnum = number\n+ 3 * 2;\n} else {\nnum++;\n}\nfor (i in [1..100]) {\n}\ntry {\nwhile (this.number < 2\nand number != 3) {\nf1("Some text",\n12);\n}\n} catch (e: Exception) {\n} finally {\n}\nreturn 0;\n}\n}

#SAMPLE_Wrapping=public class MyNode extends Node, Object {\npublic var x: Number;\nvar p: Integer[] = [1, 2, 3, 5, 7];\nprotected function create(text: String, number: Integer): Integer {\nif (text == null) {\nprintln(create("text text text", 100));\n} else if (text == "noob") {\nx = func1().func2().func3();\n} else {\nx = 0;\n}\nfor (num in p) x = 10; {\nvar i = num * 2;\n}\nwhile (i < 5 or text == "") {\ni++;\nreturn 0;\n}\n}\n}

#SAMPLE_BlankLines=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\npublic def str: String = "str";\npublic-read var i = 10;\npublic function function1() {}\npublic function function2(param1: Integer): String {"str = {str}"}\npublic class ClassA {\n}\npublic class ClassB {\n}

#SAMPLE_BlankLines2=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\nfunction f() {}\nfunction f1() {}\nprintln("");\nprintln("");\nprintln("");\nprintln("");\nfunction f2() {}\nfunction f3() {}

#SAMPLE_Spaces=import java.lang.IllegalStateException;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.Font;\npublic class ClassA {\npublic-read var number: Number = 1;\npackage def text: String = "A";\nvar floats: Float[];\nvar doubles = [3.67, 40, 2e-30];\ninit {\ninsert 12.6 into floats;\n}\npostinit {\ndelete floats;\n}\npublic function f1(text: String, number: Number): Number {\nvar n = number;\nvar t = Text {\nfont: Font {size: 24}\nx: 10, y: 30\ncontent: text\n};\nif (number == 13) {\nreturn java.lang.System.currentTimeMillis();\n} else {\n{\n}\n}\nfor (i in [20..100]) {\nwhile (i mod 13 > 5) {\nf1("{t.content} ", n++);\n}\n}\ntry {\nfor (f in floats) {\nprintln(f);\n}\n} catch (illegalStateException: IllegalStateException) {\nillegalStateException.printStackTrace();\n} finally {\nreturn 20;\n}\nreturn if (number > 100) then -1 else -2;\n}\n}

#nlFinallyCheckBox1.text="finall&y"

AN_Preview=Vorschau
AD_Preview=Vorschau
FmtBraces.objectLiteralLabel.text=Objekt-Literal
FmtBraces.onReplaceLabel.text=Bei Ersetzen:
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Labels absolut einr\u00fccken
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Kommentarzeilen beginnen mit einem Stern
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Zus\u00e4tzliche Einr\u00fcckung f\u00fcr "case"-Anweisungen
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Einr\u00fcckung f\u00fcr obere Klassenmitglieder
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Einr\u00fcckung in Leerzeichen
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Labeleinr\u00fcckung in Leerzeichen
FmtBlankLines2.aNonClassExpressionLabel.text=Nach non-class Exception
FmtBlankLines2.bNonClassExpressionLabel.text=Vor non-class Exception
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
FmtAlignment.amSequenceInitCheckBox.text=Sequenz-&Init

