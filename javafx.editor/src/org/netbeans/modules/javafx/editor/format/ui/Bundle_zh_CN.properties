# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=\u5236\u8868\u7b26\u548c\u7f29\u6392
LBL_CodeGeneration=\u4ee3\u7801\u751f\u6210
LBL_Alignment=\u5bf9\u9f50
LBL_Braces=\u82b1\u62ec\u53f7
LBL_Wrapping=\u6362\u884c
LBL_BlankLines=\u7a7a\u884c
LBL_BlankLines2=\u7a7a\u884c2
LBL_Spaces=\u7a7a\u683c
LBL_Imports=\u5bfc\u5165

LBL_bp_SAME_LINE=\u540c\u4e00\u884c
LBL_bp_NEW_LINE=\u6362\u884c
LBL_bp_NEW_LINE_HALF_INDENTED=\u6362\u884c\u90e8\u5206\u7f29\u6392
LBL_bp_NEW_LINE_INDENTED= \u6362\u884c\u7f29\u6392

LBL_bg_GENERATE=\u751f\u6210
LBL_bg_LEAVE_ALONE=\u4fdd\u6301\u4e0d\u53d8
LBL_bg_ELIMINATE=\u6d88\u9664

LBL_wrp_WRAP_ALWAYS=\u59cb\u7ec8
LBL_wrp_WRAP_IF_LONG=\u5982\u679c\u8f83\u957f
LBL_wrp_WRAP_NEVER=\u4ece\u4e0d

LBL_ExpandTabToSpaces=\u5c06\u5236\u8868\u7b26\u6269\u5c55\u4e3a\u7a7a\u683c(&E)
LBL_TabSize=\u5236\u8868\u7b26\u5927\u5c0f(&T)\uff1a
LBL_IndentSize=\u7f29\u6392\u5927\u5c0f(&I)\uff1a
LBL_ContinuationIndentSize=\u8fde\u7eed\u7f29\u6392\u5927\u5c0f(&C)\uff1a
LBL_LabelIndent=\u7f29\u6392\u6807\u7b7e(&L)\uff1a
LBL_AbsoluteLabelIndent=\u7edd\u5bf9\u7f29\u6392\u6807\u7b7e(&A)
LBL_IndentTopLevelClassMemberts=\u7f29\u6392\u9876\u5c42\u7c7b\u6210\u5458(&I)
LBL_AddLeadingStarInComment=\u5728\u6ce8\u91ca\u4e2d\u6dfb\u52a0\u524d\u5bfc\u661f\u53f7(&D)
LBL_RightMargin=\u53f3\u8fb9\u8ddd(&R)\uff1a

LBL_Naming=\u547d\u540d\uff1a
LBL_PreferLongerNames=\u9996\u9009\u8f83\u957f\u7684\u540d\u79f0
LBL_Prefix=\u524d\u7f00
LBL_Suffix=\u540e\u7f00
LBL_Field=\u5b57\u6bb5\uff1a
LBL_StaticField=\u9759\u6001\u5b57\u6bb5\uff1a
LBL_Parameter=\u53c2\u6570\uff1a
LBL_LocalVariable=\u5c40\u90e8\u53d8\u91cf\uff1a
LBL_Misc=\u5176\u4ed6\uff1a
LBL_QualifyFieldAccess=\u9650\u5b9a\u5b57\u6bb5\u8bbf\u95ee
LBL_UseIsForBooleanGetters=\u5c06 "Is" \u7528\u4e8e\u5e03\u5c14\u578b\u7684 getter
LBL_AddOverrideAnnotation=\u6dfb\u52a0\u8986\u76d6\u6807\u6ce8
LBL_FinalMofier=final \u4fee\u9970\u7b26\uff1a
LBL_ParametersFinal=\u5c06\u751f\u6210\u7684\u53c2\u6570\u4f5c\u4e3a\u6700\u7ec8\u53c2\u6570
LBL_LocalVariablesFinal=\u5c06\u751f\u6210\u7684\u5c40\u90e8\u53d8\u91cf\u4f5c\u4e3a\u6700\u7ec8\u53d8\u91cf
LBL_ImportOredering=\u5bfc\u5165\u987a\u5e8f\uff1a
LBL_ImportUp=\u4e0a\u79fb
LBL_ImportDown=\u4e0b\u79fb
LBL_blBeforePackage=\u5728\u5305\u4e4b\u524d(&P)\uff1a
LBL_blAfterPackage=\u5728\u5305\u4e4b\u540e(&A)\uff1a
LBL_blBeforeImports=\u5728\u5bfc\u5165\u4e4b\u524d(&I)\uff1a
LBL_blAfterImports=\u5728\u5bfc\u5165\u4e4b\u540e\uff1a
LBL_blBeforeClass=\u5728\u7c7b\u4e4b\u524d(&C)\uff1a
LBL_blAfterClass=\u5728\u7c7b\u4e4b\u540e(&L)\uff1a
LBL_blAfterClassHeader=\u5728\u7c7b\u5934\u4e4b\u540e(&H)\uff1a
LBL_blBeforeFields=\u5728\u5c5e\u6027\u4e4b\u524d(&B)\uff1a
LBL_blAfterFields=\u5728\u5c5e\u6027\u4e4b\u540e(&T)\uff1a
LBL_blBeforeMethods=\u5728\u51fd\u6570\u4e4b\u524d(&F)\uff1a
LBL_blAfterMethods=\u5728\u51fd\u6570\u4e4b\u540e(&N)\uff1a

LBL_BeforeKeywords=\u5728\u5173\u952e\u5b57\u4e4b\u524d
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=\u5728\u5706\u62ec\u53f7\u4e4b\u524d
LBL_spaceBeforeFunctionDeclParen=\u51fd\u6570\u58f0\u660e
LBL_spaceBeforeFunctionCallParen=\u51fd\u6570\u8c03\u7528
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=\u6807\u6ce8\u53c2\u6570
LBL_spaceBeforeObjectLiteral=\u5bf9\u8c61\u5b57\u9762\u503c

LBL_AroundOperators=\u8fd0\u7b97\u7b26\u5468\u56f4
LBL_spaceAroundUnaryOps=\u4e00\u5143\u8fd0\u7b97\u7b26
LBL_spaceAroundBinaryOps=\u4e8c\u5143\u8fd0\u7b97\u7b26
LBL_spaceAroundRangeOps=\u8303\u56f4\u8fd0\u7b97\u7b26
LBL_spaceAroundAssignOps=\u8d4b\u503c\u8fd0\u7b97\u7b26

LBL_BeforeLeftBraces=\u5728\u5de6\u82b1\u62ec\u53f7\u4e4b\u524d
LBL_spaceBeforeClassDeclLeftBrace=\u7c7b\u58f0\u660e
LBL_spaceBeforeFunctionDeclLeftBrace=\u51fd\u6570\u58f0\u660e
LBL_spaceBeforeOnReplaceDeclLeftBrace=\u66ff\u6362\u65f6\u58f0\u660e
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSequenceInitLeftBrace=\u5e8f\u5217\u521d\u59cb\u5316\u51fd\u6570
LBL_spaceBeforeObjectLiteralDeclLeftBrace=\u5bf9\u8c61\u5b57\u9762\u503c
LBL_spaceBeforeClassInitBlockLeftBrace=\u7c7b\u521d\u59cb\u5316\u5757
LBL_spaceBeforePostInitBlockLeftBrace=\u7c7b\u540e\u521d\u59cb\u5316\u5757

LBL_WithinParentheses=\u5728\u5706\u62ec\u53f7\u5185
LBL_spaceWithinParens=\u5706\u62ec\u53f7
LBL_spaceWithinFunctionDeclParens=\u51fd\u6570\u58f0\u660e
LBL_spaceWithinFunctionCallParens=\u51fd\u6570\u8c03\u7528
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinBraces=\u82b1\u62ec\u53f7
LBL_spaceWithinArrayInitBrackets=\u5e8f\u5217\u521d\u59cb\u5316\u62ec\u53f7

LBL_Other=\u5176\u4ed6
LBL_spaceBeforeComma=\u5728\u9017\u53f7\u4e4b\u524d
LBL_spaceAfterComma=\u5728\u9017\u53f7\u4e4b\u540e
LBL_spaceBeforeSemi=\u5728\u5206\u53f7\u4e4b\u524d
LBL_spaceAfterSemi=\u5728\u5206\u53f7\u4e4b\u540e
LBL_spaceBeforeColon=\u5728\u5192\u53f7\u4e4b\u524d
LBL_spaceAfterColon=\u5728\u5192\u53f7\u4e4b\u540e
LBL_wrp_extendsImplementsKeyword=\u6269\u5c55\u5173\u952e\u5b57(&E)\uff1a 
LBL_wrp_extendsImplementsList=\u6269\u5c55\u5217\u8868(&X)\uff1a
LBL_wrp_methodParameters=\u51fd\u6570\u53c2\u6570(&P)\uff1a
LBL_wrp_throwsKeyword=\u629b\u51fa\u5173\u952e\u5b57(&T)\uff1a
LBL_wrp_throwsList=\u629b\u51fa\u5217\u8868(&R)\uff1a
LBL_wrp_methodCallArgs=\u51fd\u6570\u8c03\u7528\u53c2\u6570\:
LBL_wrp_annotationArgs=\u6807\u6ce8\u53c2\u6570(&U)\uff1a
LBL_wrp_chainedFunctionCalls=\u94fe\u63a5\u7684\u51fd\u6570\u8c03\u7528(&H)\uff1a
LBL_wrp_arrayInit=\u5e8f\u5217\u521d\u59cb\u5316\u51fd\u6570(&Z)\uff1a
LBL_wrp_for=&For\uff1a
LBL_wrp_forStatement=F&or \u8bed\u53e5\uff1a
LBL_wrp_ifStatement=If \u8868\u8fbe\u5f0f(&I)\uff1a
LBL_wrp_whileStatement=&While \u8bed\u53e5\uff1a
LBL_wrp_doWhileStatement=&Do ... While \u8bed\u53e5
LBL_wrp_assert=\u65ad\u8a00(&A)\uff1a
LBL_wrp_enumConstants=\u679a\u4e3e\u5e38\u91cf(&C)\uff1a
LBL_wrp_annotations=\u6807\u6ce8(&N)\uff1a
LBL_wrp_binaryOps=\u4e8c\u5143\u8fd0\u7b97\u7b26(&B)\uff1a
LBL_wrp_ternaryOps=\u4e09\u5143\u8fd0\u7b97\u7b26(&Y)\uff1a
LBL_wrp_assignOps=\u8d4b\u503c\u8fd0\u7b97\u7b26(&G)\uff1a

LBL_br_bracesPlacement=\u82b1\u62ec\u53f7\u4f4d\u7f6e
LBL_br_bracesGeneration=\u82b1\u62ec\u53f7\u751f\u6210
LBL_al_newLines=\u6362\u884c
LBL_al_multilineAlignment=\u591a\u884c\u5bf9\u9f50
LBL_bp_ClassDecl=\u7c7b\u58f0\u660e(&C)\uff1a
LBL_bp_MethodDecl=\u51fd\u6570\u58f0\u660e(&F)\uff1a
LBL_bp_Other=\u5176\u4ed6(&O)\uff1a
LBL_bp_SpecialElseIf=\u7279\u6b8a "else if" \u7684\u5904\u7406(&S)
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=\u5728\u4fee\u9970\u7b26\u4e4b\u540e(&R)
LBL_am_MethodParams=\u51fd\u6570\u53c2\u6570(&P)
LBL_am_CallArgs=\u51fd\u6570\u8c03\u7528\u53c2\u6570(&U)
LBL_am_AnnotationArgs=\u6807\u6ce8\u53c2\u6570(&A)
LBL_an_Implements=\u6269\u5c55\u5217\u8868(&X)
LBL_am_Throws=\u629b\u51fa\u5217\u8868(&T)
LBL_am_Paren=\u5305\u542b\u5728\u5706\u62ec\u53f7\u5185(&D)
LBL_am_BinaryOp=\u4e8c\u5143\u8fd0\u7b97\u7b26(&B)
LBL_am_TernaryOp="if else" \u8868\u8fbe\u5f0f
LBL_am_Assign=\u8d4b\u503c(&G)
LBL_am_For="for"(&F)
LBL_am_ArrayInit=\u5e8f\u5217\u521d\u59cb\u5316(&Z)

LBL_IndentCasesFromSwitch=\u5728 &Switch \u4e2d\u8fdb\u884c Case \u8bed\u53e5\u7f29\u6392

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\npublic int number = 1;\nprivate String text ="A";\npublic ClassA() {\n}\npublic void method(String text, int number) {\n}\n}

#SAMPLE_TabsIndents=public def str: String = "str";\npublic class ClassA {\nvar multiples = [0..100][n | n mod 17 == 0];\nvar days = ["Mon", "Tue", "Wed", "Thu", "Fri",\n"Sat", "Sun"];\ninit {\nprintln("init block...");\n}\npublic function reverseSeq() {\nreverse days;\n}\npublic function sliceSeq() {\ndef weekend = days[5..6];\ndef weekdays = days[0..<5];\ndef weekend2 = days[5..];\ndef days2 = days[0..<];\n}\n}

#SAMPLE_AlignBraces=import java.lang.Exception;\nmixin class Class1 {}\nmixin class Class2 {}\nmixin class Class3 {}\npublic class ClassA extends Class1,\nClass2, Class3 {\nvar p: Integer[] = [1,\n2, 3, 5, 7];\npublic var number = 1 on replace prev = next {\nif (prev != next) {\n}\n};\nvar timeline = javafx.animation.Timeline {\nrepeatCount: Double.POSITIVE_INFINITY\n};\npublic function f1(text: String,\nnumber: Integer): Integer {\nvar t1 = (text as String);\nvar num: Integer;\nif (text == null) {\nt1 =\n"a";\n} else if (text.length() == 0) {\nt1 = if (number == 2) then "empty" else "nonempty";\nnum = number\n+ 3 * 2;\n} else {\nnum++;\n}\nfor (i in [1..100]) {\n}\ntry {\nwhile (this.number < 2\nand number != 3) {\nf1("Some text",\n12);\n}\n} catch (e: Exception) {\n} finally {\n}\nreturn 0;\n}\n}

#SAMPLE_Wrapping=public class MyNode extends Node, Object {\npublic var x: Number;\nvar p: Integer[] = [1, 2, 3, 5, 7];\nprotected function create(text: String, number: Integer): Integer {\nif (text == null) {\nprintln(create("text text text", 100));\n} else if (text == "noob") {\nx = func1().func2().func3();\n} else {\nx = 0;\n}\nfor (num in p) x = 10; {\nvar i = num * 2;\n}\nwhile (i < 5 or text == "") {\ni++;\nreturn 0;\n}\n}\n}

#SAMPLE_BlankLines=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\npublic def str: String = "str";\npublic-read var i = 10;\npublic function function1() {}\npublic function function2(param1: Integer): String {"str = {str}"}\npublic class ClassA {\n}\npublic class ClassB {\n}

#SAMPLE_BlankLines2=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\nfunction f() {}\nfunction f1() {}\nprintln("");\nprintln("");\nprintln("");\nprintln("");\nfunction f2() {}\nfunction f3() {}

#SAMPLE_Spaces=import java.lang.IllegalStateException;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.Font;\npublic class ClassA {\npublic-read var number: Number = 1;\npackage def text: String = "A";\nvar floats: Float[];\nvar doubles = [3.67, 40, 2e-30];\ninit {\ninsert 12.6 into floats;\n}\npostinit {\ndelete floats;\n}\npublic function f1(text: String, number: Number): Number {\nvar n = number;\nvar t = Text {\nfont: Font {\nsize: 24\n}\nx: 10, y: 30\ncontent: text\n};\nif (number == 13) {\nreturn java.lang.System.currentTimeMillis();\n} else {\n{\n}\n}\nfor (i in [20..100]) {\nwhile (i mod 13 > 5) {\nf1("{t.content} ", n++);\n}\n}\ntry {\nfor (f in floats) {\nprintln(f);\n}\n} catch (illegalStateException: IllegalStateException) {\nillegalStateException.printStackTrace();\n} finally {\nreturn 20;\n}\nreturn if (number > 100) then -1 else -2;\n}\n}

#nlFinallyCheckBox1.text="finall&y"

AN_Preview=\u9884\u89c8
AD_Preview=\u9884\u89c8
FmtBraces.objectLiteralLabel.text=\u5bf9\u8c61\u5b57\u9762\u503c\uff1a
FmtBraces.onReplaceLabel.text=\u66ff\u6362\u65f6\uff1a
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=\u7edd\u5bf9\u7f29\u6392\u6807\u7b7e
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=\u6ce8\u91ca\u884c\u4ee5\u524d\u5bfc\u661f\u53f7\u5f00\u5934
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=\u989d\u5916\u7f29\u6392 case \u8bed\u53e5
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=\u7f29\u6392\u9876\u5c42\u7c7b\u6210\u5458
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=\u7f29\u6392\u7a7a\u683c\u5927\u5c0f
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=\u6807\u7b7e\u7f29\u6392\u7a7a\u683c\u5927\u5c0f
FmtBlankLines2.aNonClassExpressionLabel.text=\u5728\u975e\u7c7b\u8868\u8fbe\u5f0f\u4e4b\u540e
FmtBlankLines2.bNonClassExpressionLabel.text=\u5728\u975e\u7c7b\u8868\u8fbe\u5f0f\u4e4b\u524d
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
FmtAlignment.amSequenceInitCheckBox.text=\u5e8f\u5217\u521d\u59cb\u5316(&I)

