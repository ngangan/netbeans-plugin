# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=\u5236\u8868\u7B26\u548C\u7F29\u6392
LBL_CodeGeneration=\u4EE3\u7801\u751F\u6210
LBL_Alignment=\u5BF9\u9F50
LBL_Braces=\u82B1\u62EC\u53F7
LBL_Wrapping=\u6362\u884C
LBL_BlankLines=\u7A7A\u884C
LBL_Spaces=\u7A7A\u683C
LBL_Imports=\u5BFC\u5165

LBL_bp_SAME_LINE=\u540C\u4E00\u884C
LBL_bp_NEW_LINE=\u6362\u884C
LBL_bp_NEW_LINE_HALF_INDENTED=\u6362\u884C\u90E8\u5206\u7F29\u6392
LBL_bp_NEW_LINE_INDENTED= \u6362\u884C\u7F29\u6392

LBL_bg_GENERATE=\u751F\u6210
LBL_bg_LEAVE_ALONE=\u4FDD\u6301\u4E0D\u53D8
LBL_bg_ELIMINATE=\u6D88\u9664

LBL_wrp_WRAP_ALWAYS=\u59CB\u7EC8
LBL_wrp_WRAP_IF_LONG=\u5982\u679C\u8F83\u957F
LBL_wrp_WRAP_NEVER=\u4ECE\u4E0D

LBL_ExpandTabToSpaces=\u5C06\u5236\u8868\u7B26\u6269\u5C55\u4E3A\u7A7A\u683C(&E)
LBL_TabSize=\u5236\u8868\u7B26\u5927\u5C0F(&T)\uFF1A
LBL_IndentSize=\u7F29\u6392\u5927\u5C0F(&I)\uFF1A
LBL_ContinuationIndentSize=\u8FDE\u7EED\u7F29\u6392\u5927\u5C0F(&C)\uFF1A
LBL_LabelIndent=\u7F29\u6392\u6807\u7B7E(&L)\uFF1A
LBL_AbsoluteLabelIndent=\u7EDD\u5BF9\u7F29\u6392\u6807\u7B7E(&A)
LBL_IndentTopLevelClassMemberts=\u7F29\u6392\u9876\u5C42\u7C7B\u6210\u5458(&I)
LBL_AddLeadingStarInComment=\u5728\u6CE8\u91CA\u4E2D\u6DFB\u52A0\u524D\u5BFC\u661F\u53F7(&D)
LBL_RightMargin=\u53F3\u8FB9\u8DDD(&R)\uFF1A

LBL_Naming=\u547D\u540D\uFF1A
LBL_PreferLongerNames=\u9996\u9009\u8F83\u957F\u7684\u540D\u79F0
LBL_Prefix=\u524D\u7F00
LBL_Suffix=\u540E\u7F00
LBL_Field=\u5B57\u6BB5\uFF1A
LBL_StaticField=\u9759\u6001\u5B57\u6BB5\uFF1A
LBL_Parameter=\u53C2\u6570\uFF1A
LBL_LocalVariable=\u5C40\u90E8\u53D8\u91CF\uFF1A
LBL_Misc=\u5176\u4ED6\uFF1A
LBL_QualifyFieldAccess=\u9650\u5B9A\u5B57\u6BB5\u8BBF\u95EE
LBL_UseIsForBooleanGetters=\u5C06 "Is" \u7528\u4E8E\u5E03\u5C14\u578B\u7684 getter
LBL_AddOverrideAnnotation=\u6DFB\u52A0\u8986\u76D6\u6807\u6CE8
LBL_FinalMofier=final \u4FEE\u9970\u7B26\uFF1A
LBL_ParametersFinal=\u5C06\u751F\u6210\u7684\u53C2\u6570\u4F5C\u4E3A\u6700\u7EC8\u53C2\u6570
LBL_LocalVariablesFinal=\u5C06\u751F\u6210\u7684\u5C40\u90E8\u53D8\u91CF\u4F5C\u4E3A\u6700\u7EC8\u53D8\u91CF
LBL_ImportOredering=\u5BFC\u5165\u987A\u5E8F\uFF1A
LBL_ImportUp=\u4E0A\u79FB
LBL_ImportDown=\u4E0B\u79FB
LBL_blBeforePackage=\u5728\u5305\u4E4B\u524D(&P)\uFF1A
LBL_blAfterPackage=\u5728\u5305\u4E4B\u540E(&A)\uFF1A
LBL_blBeforeImports=\u5728\u5BFC\u5165\u4E4B\u524D(&I)\uFF1A
LBL_blAfterImports=\u5728\u5BFC\u5165\u4E4B\u540E\uFF1A
LBL_blBeforeClass=\u5728\u7C7B\u4E4B\u524D(&C)\uFF1A
LBL_blAfterClass=\u5728\u7C7B\u4E4B\u540E(&L)\uFF1A
LBL_blAfterClassHeader=\u5728\u7C7B\u5934\u4E4B\u540E(&H)\uFF1A
LBL_blBeforeFields=\u5728\u5C5E\u6027\u4E4B\u524D(&B)\uFF1A
LBL_blAfterFields=\u5728\u5C5E\u6027\u4E4B\u540E(&T)\uFF1A
LBL_blBeforeMethods=\u5728\u51FD\u6570\u4E4B\u524D(&F)\uFF1A
LBL_blAfterMethods=\u5728\u51FD\u6570\u4E4B\u540E(&N)\uFF1A

LBL_BeforeKeywords=\u5728\u5173\u952E\u5B57\u4E4B\u524D
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=\u5728\u5706\u62EC\u53F7\u4E4B\u524D
LBL_spaceBeforeFunctionDeclParen=\u51FD\u6570\u58F0\u660E
LBL_spaceBeforeFunctionCallParen=\u51FD\u6570\u8C03\u7528
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=\u6807\u6CE8\u53C2\u6570
LBL_spaceBeforeObjectLiteral=\u5BF9\u8C61\u5B57\u9762\u503C

LBL_AroundOperators=\u8FD0\u7B97\u7B26\u5468\u56F4
LBL_spaceAroundUnaryOps=\u4E00\u5143\u8FD0\u7B97\u7B26
LBL_spaceAroundBinaryOps=\u4E8C\u5143\u8FD0\u7B97\u7B26
LBL_spaceAroundIfElseOps="if else" \u8FD0\u7B97\u7B26
LBL_spaceAroundAssignOps=\u8D4B\u503C\u8FD0\u7B97\u7B26

LBL_BeforeLeftBraces=\u5728\u5DE6\u82B1\u62EC\u53F7\u4E4B\u524D
LBL_spaceBeforeClassDeclLeftBrace=\u7C7B\u58F0\u660E
LBL_spaceBeforeFunctionDeclLeftBrace=\u51FD\u6570\u58F0\u660E
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=\u9759\u6001\u521D\u59CB\u5316\u51FD\u6570
LBL_spaceBeforeSequenceInitLeftBrace=\u5E8F\u5217\u521D\u59CB\u5316\u51FD\u6570
LBL_spaceBeforeObjectLiteralDeclLeftBrace=\u5BF9\u8C61\u5B57\u9762\u503C
LBL_spaceBeforeClassInitBlockLeftBrace=\u7C7B\u521D\u59CB\u5316\u5757
LBL_spaceBeforePostInitBlockLeftBrace=\u7C7B\u540E\u521D\u59CB\u5316\u5757

LBL_WithinParentheses=\u5728\u5706\u62EC\u53F7\u5185
LBL_spaceWithinParens=\u5706\u62EC\u53F7
LBL_spaceWithinFunctionDeclParens=\u51FD\u6570\u58F0\u660E
LBL_spaceWithinFunctionCallParens=\u51FD\u6570\u8C03\u7528
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=\u5F3A\u5236\u7C7B\u578B\u8F6C\u6362
LBL_spaceWithinAnnotationParens=\u6807\u6CE8
LBL_spaceWithinBraces=\u82B1\u62EC\u53F7
LBL_spaceWithinArrayInitBrackets=\u6570\u7EC4\u521D\u59CB\u5316\u51FD\u6570\u65B9\u62EC\u53F7

LBL_Other=\u5176\u4ED6
LBL_spaceBeforeComma=\u5728\u9017\u53F7\u4E4B\u524D
LBL_spaceAfterComma=\u5728\u9017\u53F7\u4E4B\u540E
LBL_spaceBeforeSemi=\u5728\u5206\u53F7\u4E4B\u524D
LBL_spaceAfterSemi=\u5728\u5206\u53F7\u4E4B\u540E
LBL_spaceBeforeColon=\u5728\u5192\u53F7\u4E4B\u524D
LBL_spaceAfterColon=\u5728\u5192\u53F7\u4E4B\u540E
LBL_spaceAfterTypeCast=\u5728\u5F3A\u5236\u7C7B\u578B\u8F6C\u6362\u4E4B\u540E
LBL_wrp_extendsImplementsKeyword=\u6269\u5C55\u5173\u952E\u5B57(&E)\uFF1A 
LBL_wrp_extendsImplementsList=\u6269\u5C55\u5217\u8868(&X)\uFF1A
LBL_wrp_methodParameters=\u51FD\u6570\u53C2\u6570(&P)\uFF1A
LBL_wrp_throwsKeyword=\u629B\u51FA\u5173\u952E\u5B57(&T)\uFF1A
LBL_wrp_throwsList=\u629B\u51FA\u5217\u8868(&R)\uFF1A
LBL_wrp_methodCallArgs=\u51FD\u6570\u8C03\u7528\u53C2\u6570\:
LBL_wrp_annotationArgs=\u6807\u6CE8\u53C2\u6570(&U)\uFF1A
LBL_wrp_chainedFunctionCalls=\u94FE\u63A5\u7684\u51FD\u6570\u8C03\u7528(&H)\uFF1A
LBL_wrp_arrayInit=\u6570\u7EC4\u521D\u59CB\u5316\u51FD\u6570(&Z)\uFF1A
LBL_wrp_for=&For\uFF1A
LBL_wrp_forStatement=F&or \u8BED\u53E5\uFF1A
LBL_wrp_ifStatement=&If \u8BED\u53E5\uFF1A
LBL_wrp_whileStatement=&While \u8BED\u53E5\uFF1A
LBL_wrp_doWhileStatement=&Do ... While \u8BED\u53E5
LBL_wrp_assert=\u65AD\u8A00(&A)\uFF1A
LBL_wrp_enumConstants=\u679A\u4E3E\u5E38\u91CF(&C)\uFF1A
LBL_wrp_annotations=\u6807\u6CE8(&N)\uFF1A
LBL_wrp_binaryOps=\u4E8C\u5143\u8FD0\u7B97\u7B26(&B)\uFF1A
LBL_wrp_ternaryOps=\u4E09\u5143\u8FD0\u7B97\u7B26(&Y)\uFF1A
LBL_wrp_assignOps=\u8D4B\u503C\u8FD0\u7B97\u7B26(&G)\uFF1A

LBL_br_bracesPlacement=\u82B1\u62EC\u53F7\u4F4D\u7F6E
LBL_br_bracesGeneration=\u82B1\u62EC\u53F7\u751F\u6210
LBL_al_newLines=\u6362\u884C
LBL_al_multilineAlignment=\u591A\u884C\u5BF9\u9F50
LBL_bp_ClassDecl=\u7C7B\u58F0\u660E(&C)\uFF1A
LBL_bp_MethodDecl=\u51FD\u6570\u58F0\u660E(&F)\uFF1A
LBL_bp_Other=\u5176\u4ED6(&O)\uFF1A
LBL_bp_SpecialElseIf=\u7279\u6B8A "else if" \u7684\u5904\u7406(&S)
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=\u5728\u4FEE\u9970\u7B26\u4E4B\u540E(&R)
LBL_am_MethodParams=\u51FD\u6570\u53C2\u6570(&P)
LBL_am_CallArgs=\u51FD\u6570\u8C03\u7528\u53C2\u6570(&U)
LBL_am_AnnotationArgs=\u6807\u6CE8\u53C2\u6570(&A)
LBL_an_Implements=\u6269\u5C55\u5217\u8868(&X)
LBL_am_Throws=\u629B\u51FA\u5217\u8868(&T)
LBL_am_Paren=\u5305\u542B\u5728\u5706\u62EC\u53F7\u5185(&D)
LBL_am_BinaryOp=\u4E8C\u5143\u8FD0\u7B97\u7B26(&B)
LBL_am_TernaryOp="if else" \u8868\u8FBE\u5F0F
LBL_am_Assign=\u8D4B\u503C(&G)
LBL_am_For=&For
LBL_am_ArrayInit=\u5E8F\u5217\u521D\u59CB\u5316(&Z)

LBL_IndentCasesFromSwitch=\u5728 &Switch \u4E2D\u8FDB\u884C Case \u8BED\u53E5\u7F29\u6392

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {public int number = 1;private String text ="A";public ClassA() {}public void method(String text, int number) {} }

#SAMPLE_TabsIndents=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];// Tabsprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}

#SAMPLE_AlignBraces=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];//Bracesprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}

#SAMPLE_Wrapping=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];Wrappingprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];//Spacesprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}


#nlFinallyCheckBox1.text="finall&y"


AN_Preview=\u9884\u89C8
AD_Preview=\u9884\u89C8
FmtBraces.objectLiteralLabel.text=\u5BF9\u8C61\u5B57\u9762\u503C\uFF1A
FmtBraces.onReplaceLabel.text=\u66FF\u6362\u65F6\uFF1A
FmtBlankLines.bNonClassAttributeLabel.text=\u5728\u975E\u7C7B\u5C5E\u6027\u4E4B\u524D
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>

FmtBlankLines2.aNonClassExpressionLabel.text=\u5728\u975E\u7C7B\u8868\u8FBE\u5F0F\u4E4B\u540E
FmtBlankLines2.bNonClassExpressionLabel.text=\u5728\u975E\u7C7B\u8868\u8FBE\u5F0F\u4E4B\u524D
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
