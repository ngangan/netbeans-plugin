# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=\u30bf\u30d6\u3068\u30a4\u30f3\u30c7\u30f3\u30c8
LBL_CodeGeneration=\u30b3\u30fc\u30c9\u751f\u6210
LBL_Alignment=\u4f4d\u7f6e\u63c3\u3048
LBL_Braces=\u4e2d\u62ec\u5f27
LBL_Wrapping=\u6298\u308a\u8fd4\u3057
LBL_BlankLines=\u7a7a\u884c
LBL_BlankLines2=\u7a7a\u884c2
LBL_Spaces=\u7a7a\u767d
LBL_Imports=\u30a4\u30f3\u30dd\u30fc\u30c8

LBL_bp_SAME_LINE=\u540c\u3058\u884c
LBL_bp_NEW_LINE=\u6539\u884c
LBL_bp_NEW_LINE_HALF_INDENTED=\u534a\u5206\u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u305f\u6539\u884c
LBL_bp_NEW_LINE_INDENTED= \u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u305f\u6539\u884c

LBL_bg_GENERATE=\u751f\u6210
LBL_bg_LEAVE_ALONE=\u305d\u306e\u307e\u307e\u6b8b\u3059
LBL_bg_ELIMINATE=\u524a\u9664

LBL_wrp_WRAP_ALWAYS=\u5e38\u6642
LBL_wrp_WRAP_IF_LONG=\u9577\u3044\u5834\u5408
LBL_wrp_WRAP_NEVER=\u306a\u3057

LBL_ExpandTabToSpaces=\u30bf\u30d6\u3092\u7a7a\u767d\u6587\u5b57\u306b\u5c55\u958b(&E)
LBL_TabSize=\u30bf\u30d6\u306e\u30b5\u30a4\u30ba(&T):
LBL_IndentSize=\u30a4\u30f3\u30c7\u30f3\u30c8\u30b5\u30a4\u30ba(&I):
LBL_ContinuationIndentSize=\u7d99\u7d9a\u30a4\u30f3\u30c7\u30f3\u30c8\u30b5\u30a4\u30ba(&C):
LBL_LabelIndent=\u30e9\u30d9\u30eb\u306e\u30a4\u30f3\u30c7\u30f3\u30c8(&L)\:
LBL_AbsoluteLabelIndent=\u30e9\u30d9\u30eb\u7d76\u5bfe\u30a4\u30f3\u30c7\u30f3\u30c8(&A)
LBL_IndentTopLevelClassMemberts=\u6700\u4e0a\u4f4d\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u30a4\u30f3\u30c7\u30f3\u30c8(&I)
LBL_AddLeadingStarInComment=\u30b3\u30e1\u30f3\u30c8\u306e\u5148\u982d\u306b\u661f\u5370\u3092\u8ffd\u52a0(&D)
LBL_RightMargin=\u53f3\u30de\u30fc\u30b8\u30f3(&R):

LBL_Naming=\u547d\u540d\:
LBL_PreferLongerNames=\u9577\u3044\u540d\u524d\u3092\u512a\u5148
LBL_Prefix=\u63a5\u982d\u8f9e
LBL_Suffix=\u63a5\u5c3e\u8f9e
LBL_Field=\u30d5\u30a3\u30fc\u30eb\u30c9\:
LBL_StaticField=\u9759\u7684\u30d5\u30a3\u30fc\u30eb\u30c9\:
LBL_Parameter=\u30d1\u30e9\u30e1\u30fc\u30bf\:
LBL_LocalVariable=\u5c40\u6240\u5909\u6570\:
LBL_Misc=\u305d\u306e\u4ed6\:
LBL_QualifyFieldAccess=\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\u3092\u4fee\u98fe
LBL_UseIsForBooleanGetters=\u30d6\u30fc\u30eb\u578b\u306e\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9\u306b\u4f7f\u7528
LBL_AddOverrideAnnotation=\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u6ce8\u91c8\u3092\u8ffd\u52a0
LBL_FinalMofier=\u6700\u7d42\u4fee\u98fe\u5b50\:
LBL_ParametersFinal=\u751f\u6210\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30ca\u30eb\u306b\u3059\u308b
LBL_LocalVariablesFinal=\u751f\u6210\u3055\u308c\u305f\u5c40\u6240\u5909\u6570\u3092\u30d5\u30a1\u30a4\u30ca\u30eb\u306b\u3059\u308b
LBL_ImportOredering=\u9806\u5e8f\u4ed8\u3051\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\:
LBL_ImportUp=\u4e0a\u3078\u79fb\u52d5
LBL_ImportDown=\u4e0b\u3078\u79fb\u52d5
LBL_blBeforePackage=\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u524d(&P)\:
LBL_blAfterPackage=\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u5f8c(&A)\:
LBL_blBeforeImports=\u30a4\u30f3\u30dd\u30fc\u30c8\u524d(&I)\:
LBL_blAfterImports=\u30a4\u30f3\u30dd\u30fc\u30c8\u5f8c\:
LBL_blBeforeClass=\u30af\u30e9\u30b9\u306e\u524d(&C)\:
LBL_blAfterClass=\u30af\u30e9\u30b9\u306e\u5f8c(&L)\:
LBL_blAfterClassHeader=\u30af\u30e9\u30b9\u30d8\u30c3\u30c0\u30fc\u306e\u5f8c(&H)\:
LBL_blBeforeFields=\u5c5e\u6027\u306e\u524d(&B):
LBL_blAfterFields=\u5c5e\u6027\u306e\u5f8c(&T):
LBL_blBeforeMethods=\u95a2\u6570\u306e\u524d(&F):
LBL_blAfterMethods=\u95a2\u6570\u306e\u5f8c(&N):

LBL_BeforeKeywords=\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u524d
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=\u4e38\u62ec\u5f27\u306e\u524d
LBL_spaceBeforeFunctionDeclParen=\u95a2\u6570\u5ba3\u8a00
LBL_spaceBeforeFunctionCallParen=\u95a2\u6570\u547c\u3073\u51fa\u3057
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=\u6ce8\u91c8\u30d1\u30e9\u30e1\u30fc\u30bf
LBL_spaceBeforeObjectLiteral=\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30c6\u30e9\u30eb

LBL_AroundOperators=\u6f14\u7b97\u5b50\u306e\u5468\u56f2
LBL_spaceAroundUnaryOps=\u5358\u9805\u6f14\u7b97\u5b50
LBL_spaceAroundBinaryOps=\u4e8c\u9805\u6f14\u7b97\u5b50
LBL_spaceAroundRangeOps=\u7bc4\u56f2\u6f14\u7b97\u5b50
LBL_spaceAroundAssignOps=\u4ee3\u5165\u6f14\u7b97\u5b50

LBL_BeforeLeftBraces=\u5de6\u4e2d\u62ec\u5f27\u306e\u524d
LBL_spaceBeforeClassDeclLeftBrace=\u30af\u30e9\u30b9\u5ba3\u8a00
LBL_spaceBeforeFunctionDeclLeftBrace=\u95a2\u6570\u5ba3\u8a00
LBL_spaceBeforeOnReplaceDeclLeftBrace=On Replace \u5ba3\u8a00
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSequenceInitLeftBrace=\u30b7\u30fc\u30b1\u30f3\u30b9\u521d\u671f\u5316\u5b50
LBL_spaceBeforeObjectLiteralDeclLeftBrace=\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30c6\u30e9\u30eb
LBL_spaceBeforeClassInitBlockLeftBrace=\u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af
LBL_spaceBeforePostInitBlockLeftBrace=\u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u5f8c\u30d6\u30ed\u30c3\u30af

LBL_WithinParentheses=\u4e38\u62ec\u5f27\u306e\u5185\u5074
LBL_spaceWithinParens=\u4e38\u62ec\u5f27
LBL_spaceWithinFunctionDeclParens=\u95a2\u6570\u5ba3\u8a00
LBL_spaceWithinFunctionCallParens=\u95a2\u6570\u547c\u3073\u51fa\u3057
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinBraces=\u4e2d\u62ec\u5f27
LBL_spaceWithinArrayInitBrackets=\u30b7\u30fc\u30b1\u30f3\u30b9\u521d\u671f\u5316\u306e\u89d2\u62ec\u5f27

LBL_Other=\u305d\u306e\u4ed6
LBL_spaceBeforeComma=\u30b3\u30f3\u30de\u306e\u524d
LBL_spaceAfterComma=\u30b3\u30f3\u30de\u306e\u5f8c
LBL_spaceBeforeSemi=\u30bb\u30df\u30b3\u30ed\u30f3\u306e\u524d
LBL_spaceAfterSemi=\u30bb\u30df\u30b3\u30ed\u30f3\u306e\u5f8c
LBL_spaceBeforeColon=\u30b3\u30ed\u30f3\u306e\u524d
LBL_spaceAfterColon=\u30b3\u30ed\u30f3\u306e\u5f8c
LBL_wrp_extendsImplementsKeyword=extends \u30ad\u30fc\u30ef\u30fc\u30c9(&E)\: 
LBL_wrp_extendsImplementsList=extends \u30ea\u30b9\u30c8(&X)\:
LBL_wrp_methodParameters=\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf(&P)\:
LBL_wrp_throwsKeyword=\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u30b9\u30ed\u30fc(&T)\:
LBL_wrp_throwsList=\u30b9\u30ed\u30fc\u30ea\u30b9\u30c8(&R)\:
LBL_wrp_methodCallArgs=\u95a2\u6570\u547c\u3073\u51fa\u3057\u5f15\u6570\:
LBL_wrp_annotationArgs=\u6ce8\u91c8\u306e\u5f15\u6570(&U)\:
LBL_wrp_chainedFunctionCalls=\u9023\u9396\u3055\u308c\u305f\u95a2\u6570\u547c\u3073\u51fa\u3057(&H):
LBL_wrp_arrayInit=\u30b7\u30fc\u30b1\u30f3\u30b9\u521d\u671f\u5316\u5b50(&Z):
LBL_wrp_for=for(&F)\:
LBL_wrp_forStatement=for \u6587(&O)\:
LBL_wrp_ifStatement=If \u5f0f(&I):
LBL_wrp_whileStatement=while \u6587(&W)\:
LBL_wrp_doWhileStatement=do ... while \u6587(&D)
LBL_wrp_assert=\u8868\u660e(&A)\:
LBL_wrp_enumConstants=enum \u5b9a\u6570(&C)\:
LBL_wrp_annotations=\u6ce8\u91c8(&N)\:
LBL_wrp_binaryOps=\u4e8c\u9805\u6f14\u7b97\u5b50(&B)\:
LBL_wrp_ternaryOps=\u4e09\u9805\u6f14\u7b97\u5b50(&Y)\:
LBL_wrp_assignOps=\u4ee3\u5165\u6f14\u7b97\u5b50(&G)\:

LBL_br_bracesPlacement=\u4e2d\u62ec\u5f27\u306e\u914d\u7f6e
LBL_br_bracesGeneration=\u4e2d\u62ec\u5f27\u306e\u751f\u6210
LBL_al_newLines=\u6539\u884c
LBL_al_multilineAlignment=\u8907\u6570\u884c\u306e\u4f4d\u7f6e\u63c3\u3048
LBL_bp_ClassDecl=\u30af\u30e9\u30b9\u5ba3\u8a00(&C)\:
LBL_bp_MethodDecl=\u95a2\u6570\u5ba3\u8a00(&F):
LBL_bp_Other=\u305d\u306e\u4ed6(&O)\:
LBL_bp_SpecialElseIf=\u7279\u6b8a\u306a "else if" \u306e\u51e6\u7406(&S)
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=\u4fee\u98fe\u5b50\u306e\u3042\u3068(&R)
LBL_am_MethodParams=\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf(&P)
LBL_am_CallArgs=\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f15\u6570(&U)
LBL_am_AnnotationArgs=\u6ce8\u91c8\u306e\u5f15\u6570(&A)
LBL_an_Implements=extends \u30ea\u30b9\u30c8(&X)
LBL_am_Throws=throws \u30ea\u30b9\u30c8(&T)
LBL_am_Paren=\u62ec\u5f27\u4ed8\u3051(&D)
LBL_am_BinaryOp=\u4e8c\u9805\u6f14\u7b97\u5b50(&B)
LBL_am_TernaryOp="if else" \u5f0f
LBL_am_Assign=\u4ee3\u5165(&G)
LBL_am_For="for"(&F)
LBL_am_ArrayInit=\u30b7\u30fc\u30b1\u30f3\u30b9\u521d\u671f\u5316(&Z)

LBL_IndentCasesFromSwitch=switch \u6587\u3067 case \u6587\u3092\u30a4\u30f3\u30c7\u30f3\u30c8(&S)

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\npublic int number = 1;\nprivate String text ="A";\npublic ClassA() {\n}\npublic void method(String text, int number) {\n}\n}

#SAMPLE_TabsIndents=public def str: String = "str";\npublic class ClassA {\nvar multiples = [0..100][n | n mod 17 == 0];\nvar days = ["Mon", "Tue", "Wed", "Thu", "Fri",\n"Sat", "Sun"];\ninit {\nprintln("init block...");\n}\npublic function reverseSeq() {\nreverse days;\n}\npublic function sliceSeq() {\ndef weekend = days[5..6];\ndef weekdays = days[0..<5];\ndef weekend2 = days[5..];\ndef days2 = days[0..<];\n}\n}

#SAMPLE_AlignBraces=import java.lang.Exception;\nmixin class Class1 {}\nmixin class Class2 {}\nmixin class Class3 {}\npublic class ClassA extends Class1,\nClass2, Class3 {\nvar p: Integer[] = [1,\n2, 3, 5, 7];\npublic var number = 1 on replace prev = next {\nif (prev != next) {\n}\n};\nvar timeline = javafx.animation.Timeline {\nrepeatCount: Double.POSITIVE_INFINITY\n};\npublic function f1(text: String,\nnumber: Integer): Integer {\nvar t1 = (text as String);\nvar num: Integer;\nif (text == null) {\nt1 =\n"a";\n} else if (text.length() == 0) {\nt1 = if (number == 2) then "empty" else "nonempty";\nnum = number\n+ 3 * 2;\n} else {\nnum++;\n}\nfor (i in [1..100]) {\n}\ntry {\nwhile (this.number < 2\nand number != 3) {\nf1("Some text",\n12);\n}\n} catch (e: Exception) {\n} finally {\n}\nreturn 0;\n}\n}

#SAMPLE_Wrapping=public class MyNode extends Node, Object {\npublic var x: Number;\nvar p: Integer[] = [1, 2, 3, 5, 7];\nprotected function create(text: String, number: Integer): Integer {\nif (text == null) {\nprintln(create("text text text", 100));\n} else if (text == "noob") {\nx = func1().func2().func3();\n} else {\nx = 0;\n}\nfor (num in p) x = 10; {\nvar i = num * 2;\n}\nwhile (i < 5 or text == "") {\ni++;\nreturn 0;\n}\n}\n}

#SAMPLE_BlankLines=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\npublic def str: String = "str";\npublic-read var i = 10;\npublic function function1() {}\npublic function function2(param1: Integer): String {"str = {str}"}\npublic class ClassA {\n}\npublic class ClassB {\n}

#SAMPLE_BlankLines2=package org.netbeans.samples;\nimport java.util.List;\nimport java.lang.Integer;\nfunction f() {}\nfunction f1() {}\nprintln("");\nprintln("");\nprintln("");\nprintln("");\nfunction f2() {}\nfunction f3() {}

#SAMPLE_Spaces=import java.lang.IllegalStateException;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.Font;\npublic class ClassA {\npublic-read var number: Number = 1;\npackage def text: String = "A";\nvar floats: Float[];\nvar doubles = [3.67, 40, 2e-30];\ninit {\ninsert 12.6 into floats;\n}\npostinit {\ndelete floats;\n}\npublic function f1(text: String, number: Number): Number {\nvar n = number;\nvar t = Text {\nfont: Font {\nsize: 24\n}\nx: 10, y: 30\ncontent: text\n};\nif (number == 13) {\nreturn java.lang.System.currentTimeMillis();\n} else {\n{\n}\n}\nfor (i in [20..100]) {\nwhile (i mod 13 > 5) {\nf1("{t.content} ", n++);\n}\n}\ntry {\nfor (f in floats) {\nprintln(f);\n}\n} catch (illegalStateException: IllegalStateException) {\nillegalStateException.printStackTrace();\n} finally {\nreturn 20;\n}\nreturn if (number > 100) then -1 else -2;\n}\n}

#nlFinallyCheckBox1.text="finall&y"

AN_Preview=\u30d7\u30ec\u30d3\u30e5\u30fc
AD_Preview=\u30d7\u30ec\u30d3\u30e5\u30fc
FmtBraces.objectLiteralLabel.text=\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ea\u30c6\u30e9\u30eb:
FmtBraces.onReplaceLabel.text=\u7f6e\u63db\u6642:
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=\u30e9\u30d9\u30eb\u3092\u5b8c\u5168\u306b\u30a4\u30f3\u30c7\u30f3\u30c8
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=\u5148\u982d\u304c\u661f\u5370\u3067\u59cb\u307e\u308b\u30b3\u30e1\u30f3\u30c8\u884c
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=case \u6587\u306e\u8ffd\u52a0\u306e\u30a4\u30f3\u30c7\u30f3\u30c8
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=\u6700\u4e0a\u4f4d\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u306e\u30a4\u30f3\u30c7\u30f3\u30c8
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=\u30a4\u30f3\u30c7\u30f3\u30c8\u30b5\u30a4\u30ba (\u7a7a\u767d)
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=\u30e9\u30d9\u30eb\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u30b5\u30a4\u30ba (\u7a7a\u767d)
FmtBlankLines2.aNonClassExpressionLabel.text=\u30af\u30e9\u30b9\u4ee5\u5916\u306e\u5f0f\u306e\u5f8c
FmtBlankLines2.bNonClassExpressionLabel.text=\u30af\u30e9\u30b9\u4ee5\u5916\u306e\u5f0f\u306e\u524d
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
FmtAlignment.amSequenceInitCheckBox.text=\u30b7\u30fc\u30b1\u30f3\u30b9\u521d\u671f\u5316(&I)

