# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=\u30BF\u30D6\u3068\u30A4\u30F3\u30C7\u30F3\u30C8
LBL_CodeGeneration=\u30B3\u30FC\u30C9\u751F\u6210
LBL_Alignment=\u4F4D\u7F6E\u63C3\u3048
LBL_Braces=\u4E2D\u62EC\u5F27
LBL_Wrapping=\u6298\u308A\u8FD4\u3057
LBL_BlankLines=\u7A7A\u884C
LBL_Spaces=\u7A7A\u767D
LBL_Imports=\u30A4\u30F3\u30DD\u30FC\u30C8

LBL_bp_SAME_LINE=\u540C\u3058\u884C
LBL_bp_NEW_LINE=\u6539\u884C
LBL_bp_NEW_LINE_HALF_INDENTED=\u534A\u5206\u30A4\u30F3\u30C7\u30F3\u30C8\u3055\u308C\u305F\u6539\u884C
LBL_bp_NEW_LINE_INDENTED= \u30A4\u30F3\u30C7\u30F3\u30C8\u3055\u308C\u305F\u6539\u884C

LBL_bg_GENERATE=\u751F\u6210
LBL_bg_LEAVE_ALONE=\u305D\u306E\u307E\u307E\u6B8B\u3059
LBL_bg_ELIMINATE=\u524A\u9664

LBL_wrp_WRAP_ALWAYS=\u5E38\u6642
LBL_wrp_WRAP_IF_LONG=\u9577\u3044\u5834\u5408
LBL_wrp_WRAP_NEVER=\u306A\u3057

LBL_ExpandTabToSpaces=\u30BF\u30D6\u3092\u7A7A\u767D\u6587\u5B57\u306B\u5C55\u958B(&E)
LBL_TabSize=\u30BF\u30D6\u306E\u30B5\u30A4\u30BA(&T):
LBL_IndentSize=\u30A4\u30F3\u30C7\u30F3\u30C8\u30B5\u30A4\u30BA(&I):
LBL_ContinuationIndentSize=\u7D99\u7D9A\u30A4\u30F3\u30C7\u30F3\u30C8\u30B5\u30A4\u30BA(&C):
LBL_LabelIndent=\u30E9\u30D9\u30EB\u306E\u30A4\u30F3\u30C7\u30F3\u30C8(&L)\:
LBL_AbsoluteLabelIndent=\u30E9\u30D9\u30EB\u7D76\u5BFE\u30A4\u30F3\u30C7\u30F3\u30C8(&A)
LBL_IndentTopLevelClassMemberts=\u6700\u4E0A\u4F4D\u30AF\u30E9\u30B9\u306E\u30E1\u30F3\u30D0\u30FC\u3092\u30A4\u30F3\u30C7\u30F3\u30C8(&I)
LBL_AddLeadingStarInComment=\u30B3\u30E1\u30F3\u30C8\u306E\u5148\u982D\u306B\u661F\u5370\u3092\u8FFD\u52A0(&D)
LBL_RightMargin=\u53F3\u30DE\u30FC\u30B8\u30F3(&R):

LBL_Naming=\u547D\u540D\:
LBL_PreferLongerNames=\u9577\u3044\u540D\u524D\u3092\u512A\u5148
LBL_Prefix=\u63A5\u982D\u8F9E
LBL_Suffix=\u63A5\u5C3E\u8F9E
LBL_Field=\u30D5\u30A3\u30FC\u30EB\u30C9\:
LBL_StaticField=\u9759\u7684\u30D5\u30A3\u30FC\u30EB\u30C9\:
LBL_Parameter=\u30D1\u30E9\u30E1\u30FC\u30BF\:
LBL_LocalVariable=\u5C40\u6240\u5909\u6570\:
LBL_Misc=\u305D\u306E\u4ED6\:
LBL_QualifyFieldAccess=\u30D5\u30A3\u30FC\u30EB\u30C9\u30A2\u30AF\u30BB\u30B9\u3092\u4FEE\u98FE
LBL_UseIsForBooleanGetters=\u30D6\u30FC\u30EB\u578B\u306E\u53D6\u5F97\u30E1\u30BD\u30C3\u30C9\u306B\u4F7F\u7528
LBL_AddOverrideAnnotation=\u30AA\u30FC\u30D0\u30FC\u30E9\u30A4\u30C9\u6CE8\u91C8\u3092\u8FFD\u52A0
LBL_FinalMofier=\u6700\u7D42\u4FEE\u98FE\u5B50\:
LBL_ParametersFinal=\u751F\u6210\u3055\u308C\u305F\u30D1\u30E9\u30E1\u30FC\u30BF\u3092\u30D5\u30A1\u30A4\u30CA\u30EB\u306B\u3059\u308B
LBL_LocalVariablesFinal=\u751F\u6210\u3055\u308C\u305F\u5C40\u6240\u5909\u6570\u3092\u30D5\u30A1\u30A4\u30CA\u30EB\u306B\u3059\u308B
LBL_ImportOredering=\u9806\u5E8F\u4ED8\u3051\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\:
LBL_ImportUp=\u4E0A\u3078\u79FB\u52D5
LBL_ImportDown=\u4E0B\u3078\u79FB\u52D5
LBL_blBeforePackage=\u30D1\u30C3\u30B1\u30FC\u30B8\u5316\u524D(&P)\:
LBL_blAfterPackage=\u30D1\u30C3\u30B1\u30FC\u30B8\u5316\u5F8C(&A)\:
LBL_blBeforeImports=\u30A4\u30F3\u30DD\u30FC\u30C8\u524D(&I)\:
LBL_blAfterImports=\u30A4\u30F3\u30DD\u30FC\u30C8\u5F8C\:
LBL_blBeforeClass=\u30AF\u30E9\u30B9\u306E\u524D(&C)\:
LBL_blAfterClass=\u30AF\u30E9\u30B9\u306E\u5F8C(&L)\:
LBL_blAfterClassHeader=\u30AF\u30E9\u30B9\u30D8\u30C3\u30C0\u30FC\u306E\u5F8C(&H)\:
LBL_blBeforeFields=\u5C5E\u6027\u306E\u524D(&B):
LBL_blAfterFields=\u5C5E\u6027\u306E\u5F8C(&T):
LBL_blBeforeMethods=\u95A2\u6570\u306E\u524D(&F):
LBL_blAfterMethods=\u95A2\u6570\u306E\u5F8C(&N):

LBL_BeforeKeywords=\u30AD\u30FC\u30EF\u30FC\u30C9\u306E\u524D
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=\u4E38\u62EC\u5F27\u306E\u524D
LBL_spaceBeforeFunctionDeclParen=\u95A2\u6570\u5BA3\u8A00
LBL_spaceBeforeFunctionCallParen=\u95A2\u6570\u547C\u3073\u51FA\u3057
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=\u6CE8\u91C8\u30D1\u30E9\u30E1\u30FC\u30BF
LBL_spaceBeforeObjectLiteral=\u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u30EA\u30C6\u30E9\u30EB

LBL_AroundOperators=\u6F14\u7B97\u5B50\u306E\u5468\u56F2
LBL_spaceAroundUnaryOps=\u5358\u9805\u6F14\u7B97\u5B50
LBL_spaceAroundBinaryOps=\u4E8C\u9805\u6F14\u7B97\u5B50
LBL_spaceAroundIfElseOps="if else" \u6F14\u7B97\u5B50
LBL_spaceAroundAssignOps=\u4EE3\u5165\u6F14\u7B97\u5B50

LBL_BeforeLeftBraces=\u5DE6\u4E2D\u62EC\u5F27\u306E\u524D
LBL_spaceBeforeClassDeclLeftBrace=\u30AF\u30E9\u30B9\u5BA3\u8A00
LBL_spaceBeforeFunctionDeclLeftBrace=\u95A2\u6570\u5BA3\u8A00
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=\u9759\u7684\u521D\u671F\u5316\u5B50
LBL_spaceBeforeSequenceInitLeftBrace=\u30B7\u30FC\u30B1\u30F3\u30B9\u521D\u671F\u5316\u5B50
LBL_spaceBeforeObjectLiteralDeclLeftBrace=\u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u30EA\u30C6\u30E9\u30EB
LBL_spaceBeforeClassInitBlockLeftBrace=\u30AF\u30E9\u30B9\u306E\u521D\u671F\u5316\u30D6\u30ED\u30C3\u30AF
LBL_spaceBeforePostInitBlockLeftBrace=\u30AF\u30E9\u30B9\u306E\u521D\u671F\u5316\u5F8C\u30D6\u30ED\u30C3\u30AF

LBL_WithinParentheses=\u4E38\u62EC\u5F27\u306E\u5185\u5074
LBL_spaceWithinParens=\u4E38\u62EC\u5F27
LBL_spaceWithinFunctionDeclParens=\u95A2\u6570\u5BA3\u8A00
LBL_spaceWithinFunctionCallParens=\u95A2\u6570\u547C\u3073\u51FA\u3057
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=\u578B\u30AD\u30E3\u30B9\u30C8
LBL_spaceWithinAnnotationParens=\u6CE8\u91C8
LBL_spaceWithinBraces=\u4E2D\u62EC\u5F27
LBL_spaceWithinArrayInitBrackets=\u914D\u5217\u521D\u671F\u5316\u5B50\u306E\u89D2\u62EC\u5F27

LBL_Other=\u305D\u306E\u4ED6
LBL_spaceBeforeComma=\u30B3\u30F3\u30DE\u306E\u524D
LBL_spaceAfterComma=\u30B3\u30F3\u30DE\u306E\u5F8C
LBL_spaceBeforeSemi=\u30BB\u30DF\u30B3\u30ED\u30F3\u306E\u524D
LBL_spaceAfterSemi=\u30BB\u30DF\u30B3\u30ED\u30F3\u306E\u5F8C
LBL_spaceBeforeColon=\u30B3\u30ED\u30F3\u306E\u524D
LBL_spaceAfterColon=\u30B3\u30ED\u30F3\u306E\u5F8C
LBL_spaceAfterTypeCast=\u578B\u30AD\u30E3\u30B9\u30C8\u306E\u5F8C
LBL_wrp_extendsImplementsKeyword=extends \u30AD\u30FC\u30EF\u30FC\u30C9(&E)\: 
LBL_wrp_extendsImplementsList=extends \u30EA\u30B9\u30C8(&X)\:
LBL_wrp_methodParameters=\u95A2\u6570\u30D1\u30E9\u30E1\u30FC\u30BF(&P)\:
LBL_wrp_throwsKeyword=\u30AD\u30FC\u30EF\u30FC\u30C9\u3092\u30B9\u30ED\u30FC(&T)\:
LBL_wrp_throwsList=\u30B9\u30ED\u30FC\u30EA\u30B9\u30C8(&R)\:
LBL_wrp_methodCallArgs=\u95A2\u6570\u547C\u3073\u51FA\u3057\u5F15\u6570\:
LBL_wrp_annotationArgs=\u6CE8\u91C8\u306E\u5F15\u6570(&U)\:
LBL_wrp_chainedFunctionCalls=\u9023\u9396\u3055\u308C\u305F\u95A2\u6570\u547C\u3073\u51FA\u3057(&H):
LBL_wrp_arrayInit=\u914D\u5217\u521D\u671F\u5316\u5B50(&Z)\:
LBL_wrp_for=for(&F)\:
LBL_wrp_forStatement=for \u6587(&O)\:
LBL_wrp_ifStatement=if \u6587(&I)\:
LBL_wrp_whileStatement=while \u6587(&W)\:
LBL_wrp_doWhileStatement=do ... while \u6587(&D)
LBL_wrp_assert=\u8868\u660E(&A)\:
LBL_wrp_enumConstants=enum \u5B9A\u6570(&C)\:
LBL_wrp_annotations=\u6CE8\u91C8(&N)\:
LBL_wrp_binaryOps=\u4E8C\u9805\u6F14\u7B97\u5B50(&B)\:
LBL_wrp_ternaryOps=\u4E09\u9805\u6F14\u7B97\u5B50(&Y)\:
LBL_wrp_assignOps=\u4EE3\u5165\u6F14\u7B97\u5B50(&G)\:

LBL_br_bracesPlacement=\u4E2D\u62EC\u5F27\u306E\u914D\u7F6E
LBL_br_bracesGeneration=\u4E2D\u62EC\u5F27\u306E\u751F\u6210
LBL_al_newLines=\u6539\u884C
LBL_al_multilineAlignment=\u8907\u6570\u884C\u306E\u4F4D\u7F6E\u63C3\u3048
LBL_bp_ClassDecl=\u30AF\u30E9\u30B9\u5BA3\u8A00(&C)\:
LBL_bp_MethodDecl=\u95A2\u6570\u5BA3\u8A00(&F):
LBL_bp_Other=\u305D\u306E\u4ED6(&O)\:
LBL_bp_SpecialElseIf=\u7279\u6B8A\u306A "else if" \u306E\u51E6\u7406(&S)
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=\u4FEE\u98FE\u5B50\u306E\u3042\u3068(&R)
LBL_am_MethodParams=\u95A2\u6570\u30D1\u30E9\u30E1\u30FC\u30BF(&P)
LBL_am_CallArgs=\u95A2\u6570\u547C\u3073\u51FA\u3057\u306E\u5F15\u6570(&U)
LBL_am_AnnotationArgs=\u6CE8\u91C8\u306E\u5F15\u6570(&A)
LBL_an_Implements=extends \u30EA\u30B9\u30C8(&X)
LBL_am_Throws=throws \u30EA\u30B9\u30C8(&T)
LBL_am_Paren=\u62EC\u5F27\u4ED8\u3051(&D)
LBL_am_BinaryOp=\u4E8C\u9805\u6F14\u7B97\u5B50(&B)
LBL_am_TernaryOp="if else" \u5F0F
LBL_am_Assign=\u4EE3\u5165(&G)
LBL_am_For=for(&F)
LBL_am_ArrayInit=\u30B7\u30FC\u30B1\u30F3\u30B9\u521D\u671F\u5316(&Z)

LBL_IndentCasesFromSwitch=switch \u6587\u3067 case \u6587\u3092\u30A4\u30F3\u30C7\u30F3\u30C8(&S)

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {public int number = 1;private String text ="A";public ClassA() {}public void method(String text, int number) {} }

#SAMPLE_TabsIndents=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];// Tabsprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}

#SAMPLE_AlignBraces=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];//Bracesprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}

#SAMPLE_Wrapping=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];Wrappingprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=public class MyNode extends Node {public var x : Number;var p : Integer[] = [ 1, 2, 3, 5, 7 ];//Spacesprotected function create( text : String,number : Integer ) : Integer {if( text == null ) {println( 5 );} else if( text == "noob" ) {x = -5;} else {x = 0;}for( prim in p ) {}var i = 0;while( i < 5 or text == "" ) {i++;}return 0;}}


#nlFinallyCheckBox1.text="finall&y"


AN_Preview=\u30D7\u30EC\u30D3\u30E5\u30FC
AD_Preview=\u30D7\u30EC\u30D3\u30E5\u30FC
FmtBraces.objectLiteralLabel.text=\u30AA\u30D6\u30B8\u30A7\u30AF\u30C8\u30EA\u30C6\u30E9\u30EB:
FmtBraces.onReplaceLabel.text=\u7F6E\u63DB\u6642:
FmtBlankLines.bNonClassAttributeLabel.text=\u30AF\u30E9\u30B9\u4EE5\u5916\u306E\u5C5E\u6027\u306E\u524D
FmtBlankLines.bNonClassAttributeField.text=
LBL_wrp_chainedMethodCalls=<LBL_wrp_chainedFunctionCalls>

FmtBlankLines2.bNonClassExpressionLabel.text=\u30AF\u30E9\u30B9\u4EE5\u5916\u306E\u5F0F\u306E\u524D
FmtBlankLines2.aNonClassExpressionField.text=
FmtBlankLines2.bNonClassExpressionField.text=
FmtBlankLines2.aNonClassExpressionLabel.text=\u30AF\u30E9\u30B9\u4EE5\u5916\u306E\u5F0F\u306E\u5F8C
