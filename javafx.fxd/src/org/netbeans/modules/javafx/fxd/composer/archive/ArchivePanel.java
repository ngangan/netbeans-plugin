/*
 * ArchivePanel.java
 *
 * Created on October 7, 2008, 2:28 PM
 */

package org.netbeans.modules.javafx.fxd.composer.archive;

import java.awt.event.ActionEvent;
import java.io.File;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import org.netbeans.modules.javafx.fxd.composer.misc.ActionLookup;
import org.netbeans.modules.javafx.fxd.composer.misc.ActionLookupUtils;
import org.netbeans.modules.javafx.fxd.composer.model.FXZArchive;
import org.netbeans.modules.javafx.fxd.composer.model.actions.AbstractFXDAction;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  Pavel Benes
 */
final class ArchivePanel extends javax.swing.JPanel implements ActionLookup {

    private final FXZArchive m_archive;
    
    /** Creates new form ArchivePanel */
    public ArchivePanel( FXZArchive archive) {
        m_archive = archive;
        initComponents();
        
        tableContent.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if ( !e.getValueIsAdjusting()) {
                    switch( tableContent.getSelectedRowCount()) {
                        case 0:
                            m_removeAction.setEnabled(false);
                            m_replaceAction.setEnabled(false);
                            break;
                        case 1:
                            m_removeAction.setEnabled(true);
                            m_replaceAction.setEnabled(true);
                            break;
                        default:
                            m_removeAction.setEnabled(true);
                            m_replaceAction.setEnabled(false);
                            break;
                    }
                }
            }
        });
        update();
    }

    public Action get(Class clazz) {
        return ActionLookupUtils.get(m_actions, clazz);
    }
    
    protected void update() {
        labelTotalSize.setText ( FXZArchive.getSizeText(m_archive.getSize()));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labelTotalSize = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableContent = new javax.swing.JTable();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ArchivePanel.class, "ArchivePanel.jLabel1.text")); // NOI18N

        labelTotalSize.setText(org.openide.util.NbBundle.getMessage(ArchivePanel.class, "ArchivePanel.labelTotalSize.text")); // NOI18N

        tableContent.setModel((TableModel) m_archive);
        tableContent.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableContent);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalSize)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelTotalSize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    final class AddArchiveEntryAction extends AbstractFXDAction {
        public AddArchiveEntryAction() {  
            super("add_entry", true);  //NOI18N
        }        
        public void actionPerformed(ActionEvent e) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int r = chooser.showDialog( SwingUtilities.getWindowAncestor(ArchivePanel.this),
                    NbBundle.getMessage(ArchivePanel.class, "LBL_CHOOSE_FILE")); //NOI18N
            if (r == JFileChooser.APPROVE_OPTION) {
                final File file = chooser.getSelectedFile();
                if (!file.isFile()) {
                    DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(
                            NbBundle.getMessage(ArchivePanel.class, "ERROR_NOT_A_FILE", file),
                            NotifyDescriptor.Message.WARNING_MESSAGE));
                } else {
                    try {
                        m_archive.add(file);
                        update();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(
                                NbBundle.getMessage(ArchivePanel.class, "ERROR_CANNOT_READ_FILE", ex.getLocalizedMessage()),
                                NotifyDescriptor.Message.ERROR_MESSAGE));
                    }
                }
            }
        }
    };      

    final class RemoveArchiveEntryAction extends AbstractFXDAction {
        public RemoveArchiveEntryAction() {  
            super("remove_entry", false);  //NOI18N
        }        
        public void actionPerformed(ActionEvent e) {
            int [] selRows = tableContent.getSelectedRows();
            if ( selRows != null && selRows.length > 0) {
                String [] selNames = new String[ selRows.length];
                for (int i = 0; i < selNames.length; i++) {
                    selNames[i] = (String) tableContent.getModel().getValueAt(selRows[0], 0);
                }
                m_archive.remove( selNames);
                update();
            }
        }
    };      
    
    final class ReplaceArchiveEntryAction extends AbstractFXDAction {
        public ReplaceArchiveEntryAction() {  
            super("replace_entry", false);  //NOI18N
        }        
        public void actionPerformed(ActionEvent e) {
            update();
        }
    };      
    
    private final Action m_addAction     = new AddArchiveEntryAction();
    private final Action m_removeAction  = new RemoveArchiveEntryAction();
    private final Action m_replaceAction = new ReplaceArchiveEntryAction();
    
    private final Action [] m_actions = new Action[] {
        m_addAction,
        m_removeAction,
        m_replaceAction
    };
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTotalSize;
    private javax.swing.JTable tableContent;
    // End of variables declaration//GEN-END:variables

}
