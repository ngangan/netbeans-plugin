#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
#  Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
# 
#  The contents of this file are subject to the terms of either the GNU
#  General Public License Version 2 only ("GPL") or the Common
#  Development and Distribution License("CDDL") (collectively, the
#  "License"). You may not use this file except in compliance with the
#  License. You can obtain a copy of the License at
#  http://www.netbeans.org/cddl-gplv2.html
#  or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
#  specific language governing permissions and limitations under the
#  License.  When distributing the software, include this License Header
#  Notice in each file and include the License file at
#  nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
#  particular file as subject to the "Classpath" exception as provided
#  by Sun in the GPL Version 2 section of the License file that
#  accompanied this code. If applicable, add the following below the
#  License Header, with the fields enclosed by brackets [] replaced by
#  your own identifying information:
#  "Portions Copyrighted [year] [name of copyright owner]"
# 
#  Contributor(s):
# 
#  Portions Copyrighted 1997-2009 Sun Microsystems, Inc.

MSG_File_Exists=There already is a file named "{0}"
MSG_PackageExists=There already is a package named "{0}"
MSG_NothingToFind=You have not selected anything to find. Select Find Usages, Find Overriding Methods, or both.

# rename error messages
ERR_ProjectNotOpened=Cannot refactor {0} that is defined outside of an open project.
ERR_CannotRefactorLibraryClass=Cannot refactor library class "{0}".
ERR_NameNotChanged=The name has not been modified. No changes will be performed.
ERR_RenameNative=Attempt to rename native method "{0}". Renaming a native method can cause UnsatisfiedLinkError on runtime.
ERR_IsOverridden=There are methods in subclasses/implementors of {0} that override or implement this method. They will also be renamed.
ERR_Overrides=This method overrides or implements methods in super classes/interfaces. They will also be renamed.
ERR_Overrides_Fatal=This method overrides or implements methods in super classes/interfaces, so its name cannot be changed.
ERR_Overrides_tree=This method overrides or implements a method in {0}. This method is also overridden or implemented in {1}. If you really want to perform this operation, invoke it on the method in {2}.
ERR_InnerClassClash=Cannot rename. Inner class {0} already exists in class {1}.
ERR_ClassClash=Cannot rename. Class {0} already exists in folder {1}.
ERR_ClassPackageClash=Cannot rename. There is already folder {0} in {1}.
ERR_MethodClash=Cannot rename. Method {0} with the same signature already exists in class {1}.
ERR_FieldClash=Cannot rename. Field {0} already exists in class {1}.
ERR_LocVariableClash=Cannot rename. {0} already used.
ERR_InvalidIdentifier="{0}" is not a valid Java identifier.
ERR_InvalidPackage="{0}" is not a valid package identifier.
ERR_PackageExists=Package "{0}" already exists.
ERR_ErroneousSource=Cannot rename. File {0} contains severe errors.

# move class/package error messages
ERR_TargetFolderNotSet=A target package has not been specified.
ERR_TargetFolderNotJavaPackage=A target folder is not java package.
ERR_SourceWithoutClass=Selected source does not contain any class.
ERR_SourceWithMoreClasses=You can not move a class from a source file that contains multiple top-level classes.
ERR_AccessesPackagePrivateFeature=Class "{0}" within the same package is using feature "{1}" of class you want to move ("{2}").
ERR_AccessesPackagePrivateClass=Class "{0}" within the same package is using {1} class you want to move ("{2}").
ERR_AccessesPackagePrivateFeature2=Class you want to move ("{0}") is using feature "{1}" of class "{2}" within the same package.
ERR_AccessesPackagePrivateClass2=Class you want to move ("{0}") is using {1} class ("{2}") within the same package.
ERR_PackageIsReadOnly=Package "{0}" is read only.
ERR_ClassToMoveClashes=Class "{0}" already exists in the target package.
ERR_ClassToMoveInDefaultPackage=After the move, it will not be possible to import classes in the original default package.
ERR_MovingClassToDefaultPackage=If the class is moved to the default package, classes in other packages will not be able to import the moved class.
ERR_FileAlreadyExists=File {0} already exists in package {1}.
ERR_PackageMovesToItself=The parent package has been selected as the destination. There are no changes to be performed.
ERR_CannotMovePackageToSubpackage=A package cannot be moved into one of its subpackages or into itself.
ERR_DefaultPackageCannotBeMoved=Default package cannot be moved.
ERR_CannotMoveFile=Cannot move file from library: "{0}".
ERR_MissingProjectDeps=There are references in project "{0}" to moved files, but source project "{0}" does not depend on target project "{1}". Projects need not compile.