#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
#  Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
# 
#  The contents of this file are subject to the terms of either the GNU
#  General Public License Version 2 only ("GPL") or the Common
#  Development and Distribution License("CDDL") (collectively, the
#  "License"). You may not use this file except in compliance with the
#  License. You can obtain a copy of the License at
#  http://www.netbeans.org/cddl-gplv2.html
#  or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
#  specific language governing permissions and limitations under the
#  License.  When distributing the software, include this License Header
#  Notice in each file and include the License file at
#  nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
#  particular file as subject to the "Classpath" exception as provided
#  by Sun in the GPL Version 2 section of the License file that
#  accompanied this code. If applicable, add the following below the
#  License Header, with the fields enclosed by brackets [] replaced by
#  your own identifying information:
#  "Portions Copyrighted [year] [name of copyright owner]"
# 
#  Contributor(s):
# 
#  Portions Copyrighted 1997-2009 Sun Microsystems, Inc.

MSG_File_Exists=Es existiert bereits eine Datei namens "{0}"
MSG_PackageExists=Es existiert bereits ein Paket namens "{0}"
MSG_NothingToFind=Es wurde nichts f\u00fcr die Suche angegeben. Bitte "Verwendungen anzeigen" oder "\u00dcberschreibende Methoden suchen" oder beides w\u00e4hlen.

# --- SAFE DELETE REFACTORING ------------------------------------------------------
ERR_SafeDel=Ein Fehler trat auf beim L\u00f6schen von <b>{0}</b>
LBL_ShowUsages=&Vorkommen anzeigen...
ERR_ReferencesFound=Es wurden Verweise auf ausgew\u00e4hlte Elemente gefunden. Bitte alle Verweise auf diese Elemente entfernen, um die Klasse sicher zu entfernen.
ERR_SafeDel_FromReference=Ein sicheres L\u00f6schen kann nicht von Klassen- oder Methodenreferenzen aufgerufen werden
ERR_SafeDel_InvalidType=Ein sicheres L\u00f6schen kann nur f\u00fcr eine Methode, ein Feld oder eine Klasse aufgerufen werden
ERR_OverridesAbstractMethod=Die ausgew\u00e4hlte Methode kann nicht sicher gel\u00f6scht werden, da sie eine abstrakte Methode implementiert: {0}.  

# rename error messages
ERR_ProjectNotOpened={0} kann nicht \u00fcberarbeitet werden, wenn es sich ausserhalb eines ge\u00f6ffneten Projektes befindet.
ERR_CannotRefactorLibraryClass=Bibliotheksklasse "{0}" kann nicht \u00fcberarbeitet werden.
ERR_NameNotChanged=Der Name wurde nicht ge\u00e4ndert. Es werden keine \u00c4nderungen vorgenommen.
ERR_RenameNative=Versuchte Umbennung der nativen Methode "{0}". Das Umbenennen von nativen Methoden kann zur Laufzeit einen "UnsatisfiedLinkError" verursachen.
ERR_IsOverridden=Es existieren Methoden in Subklassen/Implementierungen von {0} welche diese Methode \u00fcberschreiben oder implementieren. Diese werden auch umbenannt.
ERR_Overrides=Diese Methode \u00fcberschreibt oder implementiert Methoden der Superklasse/-interface. Diese werden auch umbenannt.
ERR_Overrides_Fatal=Diese Methode \u00fcberschreibt oder implementiert eine Methode einer Superklasse/Schnittstelle, daher kann sie nicht umbenannt werden.
ERR_Overrides_tree=Diese Methode \u00fcberschreibt oder implementiert ein Methode in {0}. Diese Methode ist in {1} ebenfalls \u00fcberschrieben. Wenn diese Operation wirklich ausgef\u00fchrt werden soll, mu\u00df sie auf der Methode in {2} aufgerufen werden.
ERR_InnerClassClash=Kann nicht umbenennen. Die innere Klasse {0} existiert bereits in Klasse {1}.
ERR_ClassClash=Kann nicht umbenennen. Klasse {0} existiert bereits in Verzeichnis {1}.
ERR_ClassPackageClash=Kann nicht umbenennen. Es existiert bereits ein Verzeichnis {0} in {1}.
ERR_MethodClash=Kann nicht umbenennen. Die Methode {0} mit der gleichen Signatur existiert bereits in Klasse {1}.
ERR_FieldClash=Kann nicht umbenennen. Das Feld {0} existiert bereits in Klasse {1}.
ERR_LocVariableClash=Kann nicht umbenennen. {0} wird bereits benutzt.
ERR_InvalidIdentifier={0} ist kein g\u00fcltiger Java-Bezeichner.
ERR_InvalidPackage="{0}" ist kein g\u00fcltiger Paket-Bezeichner.
ERR_PackageExists=Paket "{0}" existiert bereits.
ERR_ErroneousSource=Kann nicht umbenennen. Die Datei {0} enth\u00e4lt schwerwiegende Fehler.
ERR_CanNotRenameExisting=Kann nicht zu {0} umbenennen. Es existiert bereits.

# move class/package error messages
ERR_TargetFolderNotSet=Es wurde kein Zielpaket angegeben.
ERR_TargetFolderNotJavaPackage=Das Zielverzeichnis is kein Javapaket.
ERR_SourceWithoutClass=Der gew\u00e4hlte Quelltext enth\u00e4lt keine Klasse.
ERR_SourceWithMoreClasses=Aus einer Quelltextdatei kann keine Klasse verschoben werden, wenn diese mehrere oberste Klassen enth\u00e4lt.
ERR_AccessesPackagePrivateFeature=Die Klasse "{0}" im selben Paket nutzt die Funktion "{1}" der zu verschiebenden Klasse ("{2}").
ERR_AccessesPackagePrivateClass=Die Klasse "{0}" im selben Paket nutzt die Klasse "{1}", die verschoben werden soll ("{2}").
ERR_AccessesPackagePrivateFeature1=Die zu verschiebende Klasse ("{0}") nutzt die Funktion "{1}" von Klasse "{2}" im selben Paket.
ERR_AccessesPackagePrivateClass1=Die zu verschiebende Klasse ("{0}") nutzt die Klasse "{1}" im selben Paket ("{2}").
ERR_AccessesPackagePrivateFeature2=Die Klasse "{0}" nutzt eine Funktionalit\u00e4t "{1}" der Klasse "{2}" im gleichen Paket.
ERR_AccessesPackagePrivateClass2=Die Klasse "{0}" nutzt die Klasse "{0}" im selben Paket.
ERR_PackageIsReadOnly=Paket "{0}" ist schreibgesch\u00fctzt.
ERR_ClassToMoveClashes=Klasse "{0}" existiert bereits im Zielpaket.
ERR_ClassToMoveInDefaultPackage=Nach dem Verschieben wird es nicht m\u00f6glich sein, Klassen im Standardpaket zu importieren.
ERR_MovingClassToDefaultPackage=Wenn die Klasse ins Standardpaket verschieben wird, k\u00f6nnen Klassen aus anderen Paketen sie nicht mehr importieren.
ERR_FileAlreadyExists=Datei {0} existiert bereits im Paket {1}.
ERR_PackageMovesToItself=Das Originalpackage wurde als Ziel gew\u00e4hlt. Es liegen keine \u00c4nderungen vor.
ERR_CannotMovePackageToSubpackage=Ein Paket kann nicht in eines seiner Unterpakete oder in sich selbst verschoben werden.
ERR_DefaultPackageCannotBeMoved=Das Standardpaket kann nicht verschoben werden.
ERR_CannotMoveFile=Kann Datei aus der Bibliothek nicht verschieben: "{0}".
ERR_MissingProjectDeps=Im Projekt "{0}" existieren Verweise auf verschobene Dateien, aber das Quellprojekt "{0}" ist nicht nicht abh\u00e4ngig vom Zielprojekt "{1}". Die Projekte m\u00fc\u00dfen kompiliert werden.

# --- COPY CLASS ---------------------------------------------------------------
TXT_CopyClassToPackage=Erzeuge eine neue Klasse ({0}) im Package {1}, als Kopie von {2}
TXT_UpdatePackage=Paketdeklaration in Klasse {0} auf {1} aktualisieren
TXT_RenameClass=Klasse nach {0} umbenennen
TXT_FixReferences=Importe korrigieren und Referenzen in Klasse {0} aktualisieren

TXT_CopyFile=Kopiere Datei {0}

LBL_SetClassName=Klassenname auf "{0}" setzen


