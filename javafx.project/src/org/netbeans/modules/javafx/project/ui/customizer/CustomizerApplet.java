/*
 * CustomizerApplet.java
 *
 * Created on June 17, 2008, 7:26 PM
 */

package org.netbeans.modules.javafx.project.ui.customizer;

/**
 *
 * @author  alex
 */
public class CustomizerApplet extends javax.swing.JPanel {

    /** Creates new form CustomizerApplet */
    public CustomizerApplet(JavaFXProjectProperties uiProperties) {
        initComponents();
        
        uiProperties.javaScriptModel.setMnemonic(javaScriptCheckBox.getMnemonic());
        javaScriptCheckBox.setModel(uiProperties.javaScriptModel);
        
        uiProperties.jnlpFileModel.setMnemonic(jnlpFileCheckBox.getMnemonic());
        jnlpFileCheckBox.setModel(uiProperties.jnlpFileModel);
        
        uiProperties.draggableModel.setMnemonic(draggableCheckBox.getMnemonic());
        draggableCheckBox.setModel(uiProperties.draggableModel);
        
        uiProperties.runAppletInBrowser.setMnemonic(runInBrowserCheckBox.getMnemonic());
        runInBrowserCheckBox.setModel(uiProperties.runAppletInBrowser);
        
        javaArgumentsTextField.setDocument(uiProperties.javaArgumentsDocument);
        widthSpinner.setModel(uiProperties.widthModel);
        heightSpinner.setModel(uiProperties.heightModel);
        boolean isSelected = javaScriptCheckBox.getModel().isSelected();
        noteLabel.setVisible(false);
        boolean enabled = runInBrowserCheckBox.getModel().isSelected();
        setEnabledAllComponents(enabled);
        if (!enabled) {
            setSelectedAllComponents(enabled);
        }
        
    }
    private void setEnabledAllComponents(boolean enabled) {
        javaScriptCheckBox.setEnabled(enabled);
        jnlpFileCheckBox.setEnabled(enabled);
        draggableCheckBox.setEnabled(enabled);
        widthLabel.setEnabled(enabled);
        heightLabel.setEnabled(enabled);
        widthSpinner.setEnabled(enabled);
        heightSpinner.setEnabled(enabled);
    }
    private void setSelectedAllComponents(boolean selected) {
        javaScriptCheckBox.getModel().setSelected(selected);
        jnlpFileCheckBox.getModel().setSelected(selected);
        draggableCheckBox.getModel().setSelected(selected);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javaScriptCheckBox = new javax.swing.JCheckBox();
        jnlpFileCheckBox = new javax.swing.JCheckBox();
        descriptionLabel = new javax.swing.JLabel();
        draggableCheckBox = new javax.swing.JCheckBox();
        javaArgumentsTextField = new javax.swing.JTextField();
        javaArgumentsLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        runInBrowserCheckBox = new javax.swing.JCheckBox();
        noteLabel = new javax.swing.JLabel();
        widthLabel = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        heightLabel = new javax.swing.JLabel();
        heightSpinner = new javax.swing.JSpinner();

        setMinimumSize(new java.awt.Dimension(499, 239));
        setPreferredSize(new java.awt.Dimension(499, 239));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(javaScriptCheckBox, org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.javaScriptCheckBox.text")); // NOI18N
        javaScriptCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.javaScriptCheckBox.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 2);
        add(javaScriptCheckBox, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jnlpFileCheckBox, org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.jnlpFileCheckBox.text")); // NOI18N
        jnlpFileCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.jnlpFileCheckBox.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 2);
        add(jnlpFileCheckBox, gridBagConstraints);

        descriptionLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.descriptionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 9, 0);
        add(descriptionLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(draggableCheckBox, org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.draggableCheckBox.text")); // NOI18N
        draggableCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.draggableCheckBox.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 6, 2);
        add(draggableCheckBox, gridBagConstraints);

        javaArgumentsTextField.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.javaArgumentsTextField.text")); // NOI18N
        javaArgumentsTextField.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.javaArgumentsTextField.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 12);
        add(javaArgumentsTextField, gridBagConstraints);

        javaArgumentsLabel.setLabelFor(javaArgumentsTextField);
        org.openide.awt.Mnemonics.setLocalizedText(javaArgumentsLabel, org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.javaArgumentsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 2);
        add(javaArgumentsLabel, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 2);
        add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(runInBrowserCheckBox, org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.runInBrowserCheckBox.text")); // NOI18N
        runInBrowserCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runInBrowserCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        add(runInBrowserCheckBox, gridBagConstraints);
        runInBrowserCheckBox.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.runInBrowserCheckBox.AccessibleContext.accessibleDescription")); // NOI18N

        noteLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.noteLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 2, 2, 2);
        add(noteLabel, gridBagConstraints);

        widthLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.widthLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        add(widthLabel, gridBagConstraints);

        widthSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.widthSpinner.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 60, 0, 10);
        add(widthSpinner, gridBagConstraints);

        heightLabel.setText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.heightLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(heightLabel, gridBagConstraints);

        heightSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(CustomizerApplet.class, "CustomizerApplet.heightSpinner.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 60, 0, 10);
        add(heightSpinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void runInBrowserCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runInBrowserCheckBoxActionPerformed
// TODO add your handling code here:
    boolean enabled = runInBrowserCheckBox.getModel().isSelected();
    if (!enabled) {
        setSelectedAllComponents(enabled);
    }
    setEnabledAllComponents(enabled);
}//GEN-LAST:event_runInBrowserCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JCheckBox draggableCheckBox;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel javaArgumentsLabel;
    private javax.swing.JTextField javaArgumentsTextField;
    private javax.swing.JCheckBox javaScriptCheckBox;
    private javax.swing.JCheckBox jnlpFileCheckBox;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JCheckBox runInBrowserCheckBox;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables

}
